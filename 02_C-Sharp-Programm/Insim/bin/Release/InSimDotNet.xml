<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InSimDotNet</name>
    </assembly>
    <members>
        <member name="T:InSimDotNet.Packets.UserType">
            <summary>
            Represents <see cref="T:InSimDotNet.Packets.IS_MSO"/> user types.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.UserType.MSO_SYSTEM">
            <summary>
            System message.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.UserType.MSO_USER">
            <summary>
            Normal visible user message.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.UserType.MSO_PREFIX">
            <summary>
            Hidden message starting with special prefix (see ISI prefix).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.UserType.MSO_O">
            <summary>
            Hidden message typed on local PC with /o command.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ReplayOptions">
            <summary>
            Represents the replay options.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayOptions.RIPOPT_LOOP">
            <summary>
            Loop replay.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayOptions.RIPOPT_SKINS">
            <summary>
            Download missing skins.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayOptions.RIPOPT_FULL_PHYS">
            <summary>
            Have LFS calculate full physics during replay seek.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.RaceFlags">
            <summary>
            Represents the host race flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_CAN_VOTE">
            <summary>
            Voting.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_CAN_SELECT">
            <summary>
            Track select.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_MID_RACE">
            <summary>
            Mid-race join.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_MUST_PIT">
            <summary>
            Mandatory pit-stop.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_CAN_RESET">
            <summary>
            Can reset car.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_FCV">
            <summary>
            Forced cockpit view.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RaceFlags.HOSTF_CRUISE">
            <summary>
            Cruise mode.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SMALL">
            <summary>
            General purpose packet eight byte packet.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IPacket">
            <summary>
            Represents an InSim packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IPacket.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IPacket.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IPacket.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ISendable">
            <summary>
            Represents an InSim packet which can be sent to LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.ISendable.GetBuffer">
            <summary>
            Gets the packet data as a buffer array.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.ISendable.ReqI">
            <summary>
            Sets the request ID.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SMALL.#ctor">
            <summary>
            Creates a new general purpose packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SMALL.#ctor(System.Byte[])">
            <summary>
            Creates a new general purpose packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SMALL.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SMALL.Size">
            <summary>
            Gets the packet size.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SMALL.Type">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SMALL.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SMALL.SubT">
            <summary>
            Gets or sets the packet sub-type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SMALL.UVal">
            <summary>
            Gets or sets the packet value.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PSF">
            <summary>
            Pit stop finished.
            </summary>
            <remarks>
            Sent when player completes a pit stop.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PSF.#ctor">
            <summary>
            Creates a new pit stop finished.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PSF.#ctor(System.Byte[])">
            <summary>
            Creates a new pit stop finished.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PSF.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PSF.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PSF.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PSF.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PSF.STime">
            <summary>
            Gets the time of the pit stop.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PLP">
            <summary>
            Player pits packet.
            </summary>
            <remarks>
            Sent when player pits (goes to garage screen).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLP.#ctor">
            <summary>
            Creates a new player pits packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLP.#ctor(System.Byte[])">
            <summary>
            Creates a new player pits packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLP.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLP.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_ISM">
            <summary>
            InSim multiplayer packet.
            </summary>
            <remarks>
            Send when a host is started or joined. To request one to be sent send a 
            <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of  TINY_ISM.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_ISM.#ctor">
            <summary>
            Creates a new InSim multiplayer packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_ISM.#ctor(System.Byte[])">
            <summary>
            Creates a new InSim multiplayer packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISM.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISM.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISM.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISM.Host">
            <summary>
            Gets if the client a guest or a host.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISM.HName">
            <summary>
            Gets the name of the host joined or started.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CPP">
            <summary>
            Camera position packet.
            </summary>
            <remarks>
            Used to control camera position, in car or in Shift+U mode. To request one to be 
            sent send a <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_SCP.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CPP.#ctor">
            <summary>
            Creates a new camera position packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CPP.#ctor(System.Byte[])">
            <summary>
            Creates a new camera position packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CPP.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.Pos">
            <summary>
            Gets or sets the camera position vector.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.H">
            <summary>
            Gets or sets the heading - 0 points along Y axis.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.P">
            <summary>
            Gets or sets the pitch - 0 means looking at horizon.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.R">
            <summary>
            Gets or sets the roll - 0 means no roll.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.ViewPLID">
            <summary>
            Gets or sets the unique ID of the viewed player (0 = none).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.InGameCam">
            <summary>
            Gets or sets the current camera, as reported in <see cref="T:InSimDotNet.Packets.IS_SFP"/>.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.FOV">
            <summary>
            Gets or sets the field of view.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.Time">
            <summary>
            Gets or sets the time to move to this camera position (0 = instant).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPP.Flags">
            <summary>
            Gets or sets the state flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_AXI">
            <summary>
            AutoX info packet.
            </summary>
            <remarks>
            Contains information about the current AutoX layout. To request one of these to 
            be sent send a <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_AXI.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXI.#ctor">
            <summary>
            Creates a new AutoX info packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXI.#ctor(System.Byte[])">
            <summary>
            Creates a new AutoX info packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.ReqI">
            <summary>
            Gets the packet request ID. Always zero unless a reply to an TINY_AXI request.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.AXStart">
            <summary>
            Gets the autocross start position.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.NumCP">
            <summary>
            Gets the number of checkpoints.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.NumO">
            <summary>
            Gets the number of objects.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXI.LName">
            <summary>
            Gets the name of the layout last loaded (if loaded locally).
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_HLR">
            <summary>
            Host list request packet.
            </summary>
            <remarks>
             Used to request a series <see cref="T:InSimDotNet.Packets.IR_HOS"/> host list packet to be sent.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_HLR.#ctor">
            <summary>
            Creates a new host list request packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IR_HLR.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HLR.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HLR.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HLR.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutGaugeEventArgs">
            <summary>
            Provides data for the OutGauge PacketReceived event.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutGaugeEventArgs.#ctor(InSimDotNet.Out.OutGaugePack)">
            <summary>
            Creates a new OutGaugeEventArgs object.
            </summary>
            <param name="packet">The OutGauge packet.</param>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Packet">
            <summary>
            Gets the OutGauge packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Time">
            <summary>
            Gets the time (to check order).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Car">
            <summary>
            Gets the car name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Flags">
            <summary>
            Gets the OutGauge info flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Gear">
            <summary>
            Gets the current gear (reverse: 0, neutral: 1, first: 2 etc..).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.PLID">
            <summary>
            Gets the PLID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Speed">
            <summary>
            Gets the speed in meters per second.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.RPM">
            <summary>
            Gets the RPM.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Turbo">
            <summary>
            Gets the turbo BAR.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.EngTemp">
            <summary>
            Gets the engine temperature in degrees centigrade. 
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Fuel">
            <summary>
            Gets the fuel (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.OilPressure">
            <summary>
            Gets the oil pressure in BAR.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.OilTemp">
            <summary>
            Gets the oil temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.DashLights">
            <summary>
            Gets which dashboard lights available for this car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.ShowLights">
            <summary>
            Gets the dashboard lights currently switched on.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Throttle">
            <summary>
            Gets the throttle position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Brake">
            <summary>
            Gets the brake position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Clutch">
            <summary>
             Gets the clutch position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Display1">
            <summary>
            Gets the first LCD display (usually fuel).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.Display2">
            <summary>
            Gets the second LCD display (usually settings).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugeEventArgs.ID">
            <summary>
            Gets the optional OutGauge ID (if specified in cfg.txt).
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketHandler`1">
            <summary>
            References a method to be called when a packet is received.
            </summary>
            <typeparam name="TPacket">The type of packet.</typeparam>
            <param name="insim">A reference to the InSim object that received the packet.</param>
            <param name="packet">A decoded packet object.</param>
        </member>
        <member name="T:InSimDotNet.PacketHandler">
            <summary>
            References a method to be called when a packet is received.
            </summary>
            <param name="insim">A reference to the InSim object that received the packet.</param>
            <param name="packet">A decoded packet object.</param>
        </member>
        <member name="T:InSimDotNet.UdpSocket">
            <summary>
            Manages a UDP connection with LFS.
            </summary>
        </member>
        <member name="T:InSimDotNet.ISocket">
            <summary>
            Class to handle a socket connection with LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.ISocket.Connect(System.String,System.Int32)">
            <summary>
            Connects to LFS.
            </summary>
            <param name="host">The host where LFS is running.</param>
            <param name="port">The port to connect to the host through.</param>
        </member>
        <member name="M:InSimDotNet.ISocket.Bind(System.String,System.Int32)">
            <summary>
            Binds the connection to LFS.
            </summary>
            <param name="host">The host where LFS is running.</param>
            <param name="port">The port to bind to the host through.</param>
        </member>
        <member name="M:InSimDotNet.ISocket.Disconnect">
            <summary>
            Disconnects from LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.ISocket.Send(System.Byte[])">
            <summary>
            Sends the specified buffer to LFS.
            </summary>
            <param name="buffer">An array of bytes to send.</param>
        </member>
        <member name="E:InSimDotNet.ISocket.PacketDataReceived">
            <summary>
            Occurs when packet data is received.
            </summary>
        </member>
        <member name="E:InSimDotNet.ISocket.ConnectionLost">
            <summary>
            Occurs when the connection is lost.
            </summary>
        </member>
        <member name="E:InSimDotNet.ISocket.SocketError">
            <summary>
            Occurs when an internal socket error occurs.
            </summary>
        </member>
        <member name="P:InSimDotNet.ISocket.IsConnected">
            <summary>
            Gets if LFS is connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.ISocket.Host">
            <summary>
            Gets the host the socket is connected to.
            </summary>
        </member>
        <member name="P:InSimDotNet.ISocket.Port">
            <summary>
            Gets the port the socket is connected to.
            </summary>
        </member>
        <member name="M:InSimDotNet.UdpSocket.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.UdpSocket"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Dispose">
            <summary>
            Disposes the <see cref="T:InSimDotNet.UdpSocket"/>.
            </summary>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:InSimDotNet.UdpSocket"/> object.
            </summary>
            <param name="disposing">Set true to dispose managed resources.</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Connect(System.String,System.Int32)">
            <summary>
            Connects to LFS.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to the host through.</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Bind(System.String,System.Int32)">
            <summary>
            Binds the connection to LFS.
            </summary>
            <param name="host">The host where LFS is running.</param>
            <param name="port">The port to bind to the host through.</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Disconnect">
            <summary>
            Disconnects from LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.UdpSocket.Send(System.Byte[])">
            <summary>
            Sends byte data to LFS.
            </summary>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous receive operation.
            </summary>
            <param name="asyncResult">The result of the receive operation.</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.OnPacketDataReceived(InSimDotNet.PacketDataEventArgs)">
            <summary>
            Raises the PacketDataReceived event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.PacketDataEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.OnConnectionLost(System.EventArgs)">
            <summary>
            Raises the ConnectionLost event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.UdpSocket.OnSocketError(InSimDotNet.InSimErrorEventArgs)">
            <summary>
            Raises the SocketError event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.InSimErrorEventArgs"/> object containing the event data</param>
        </member>
        <member name="E:InSimDotNet.UdpSocket.PacketDataReceived">
            <summary>
            Occurs when packet data is received.
            </summary>
        </member>
        <member name="E:InSimDotNet.UdpSocket.ConnectionLost">
            <summary>
            Occurs when the connection is lost.
            </summary>
        </member>
        <member name="E:InSimDotNet.UdpSocket.SocketError">
            <summary>
            Occurs when an internal socket error occurs.
            </summary>
        </member>
        <member name="P:InSimDotNet.UdpSocket.IsConnected">
            <summary>
            Gets if InSim is connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.UdpSocket.Host">
            <summary>
            Gets the host the socket is connected to.
            </summary>
        </member>
        <member name="P:InSimDotNet.UdpSocket.Port">
            <summary>
            Gets the port the socket is connected to.
            </summary>
        </member>
        <member name="P:InSimDotNet.UdpSocket.Socket">
            <summary>
            Exposes the underlying socket.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SCC">
            <summary>
            Set car camera packet.
            </summary>
            <remarks>
            A simplified version of <see cref="T:InSimDotNet.Packets.IS_CPP"/> (not available in SHIFT+U mode).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SCC.#ctor">
            <summary>
            Creates a new set car camera packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SCC.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCC.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCC.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCC.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCC.ViewPLID">
            <summary>
            Gets or sets the unique ID of the viewed player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCC.InGameCam">
            <summary>
            Gets or sets the in game camera.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_RST">
            <summary>
            Race start packet.
            </summary>
            <remarks>
            Sent when a race is started or restarted. To request to be sent send a 
            <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_RST.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RST.#ctor">
            <summary>
            Creates a new race start packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RST.#ctor(System.Byte[])">
            <summary>
            Creates a new race start packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.RaceLaps">
            <summary>
            Gets the laps of the race (0 if qualifying).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.QualMins">
            <summary>
            Gets the qualifying minutes of the race (0 if race).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.NumP">
            <summary>
            Gets the number of players in the race.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Timing">
            <summary>
            Gets the lap timing.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Track">
            <summary>
            Gets the track.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Weather">
            <summary>
            Gets the weather of the race.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Wind">
            <summary>
            Gets the wind of the race. 
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Flags">
            <summary>
            Gets the host flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.NumNodes">
            <summary>
            Gets the number of nodes of the track.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Finish">
            <summary>
            Gets the number of the finish line node.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Split1">
            <summary>
            Gets the number of the split 1 node.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Split2">
            <summary>
            Gets the number of the split 2 node.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RST.Split3">
            <summary>
            Gets the number of the split 3 node.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MOD">
            <summary>
            Mode change packet.
            </summary>
            <remarks>
            Used to change the LFS screen mode.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MOD.#ctor">
            <summary>
            Creates a new Mode change packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MOD.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.Bits16">
            <summary>
            Gets or sets if in 16-bit screen mode.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.RR">
            <summary>
            Gets or sets the screen refresh rate (LFS will use the highest
            available refresh rate less than or equal to the specified one).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.Width">
            <summary>
            Gets or sets the width of the screen resolution (if both Width and
            Height are 0 LFS will go into windowed mode.)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MOD.Height">
            <summary>
            Gets or sets the width of the screen resolution (if both Width and
            Height are 0 LFS will go into windowed mode.)
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MCI">
            <summary>
            Multi car information packet.
            </summary>
            <remarks>
            Contains information about cars currently on-track. To enable these 
            packets see the Flags and Interval properties when initializing InSim.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MCI.#ctor">
            <summary>
            Creates a new multi car information packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MCI.#ctor(System.Byte[])">
            <summary>
            Creates a new multi car information packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MCI.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MCI.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MCI.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MCI.NumC">
            <summary>
            Gets the number of cars in the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MCI.Info">
            <summary>
            Gets a collection of up to eight <see cref="T:InSimDotNet.Packets.CompCar"/> packets.
            </summary>
            <remarks>
            If there are more than eight cars in the race then more than one 
            <see cref="T:InSimDotNet.Packets.IS_MCI"/> packet is sent.
            </remarks>
        </member>
        <member name="T:InSimDotNet.Packets.IS_BTT">
            <summary>
            Button type packet.
            </summary>
            <remarks>
            Sent when user types text into a text-entry button.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTT.#ctor">
            <summary>
            Creates a new button type packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTT.#ctor(System.Byte[])">
            <summary>
            Creates a new button type packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.ReqI">
            <summary>
            Gets the packet request ID, as received in the <see cref="T:InSimDotNet.Packets.IS_BTN"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.UCID">
            <summary>
            Gets the unique ID of the connection that used the button (zero if local).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.ClickID">
            <summary>
            Gets the button identifier originally sent in the <see cref="T:InSimDotNet.Packets.IS_BTN"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.Inst">
            <summary>
            Used internally by InSim.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.TypeIn">
            <summary>
            Gets the max number of character the user can type in.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTT.Text">
            <summary>
            Gets the text the user entered.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_BTC">
            <summary>
            Button click packet.
            </summary>
            <remarks>
            Sent when a user clicks a button.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTC.#ctor">
            <summary>
            Creates a new button click packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTC.#ctor(System.Byte[])">
            <summary>
            Creates a new button click packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.ReqI">
            <summary>
            Gets the packet request ID as received in the <see cref="T:InSimDotNet.Packets.IS_BTN"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.UCID">
            <summary>
            Gets the unique ID of the connection that clicked the button.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.ClickID">
            <summary>
            Gets the button identifier originally sent in the <see cref="T:InSimDotNet.Packets.IS_BTN"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.Inst">
            <summary>
            Used internally by InSim.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTC.CFlags">
            <summary>
            Gets the button click flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ConfirmationFlags">
            <summary>
            Represents confirmation flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_MENTIONED">
            <summary>
            Mentioned.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_CONFIRMED">
            <summary>
            Confirmed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_PENALTY_DT">
            <summary>
            Has drive-through penalty
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_PENALTY_SG">
            <summary>
            Has stop-and-go penalty
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_PENALTY_30">
            <summary>
            Has 30 second time penalty
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_PENALTY_45">
            <summary>
            Has 45 second time penalty
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_DID_NOT_PIT">
            <summary>
            Did not complete a required pit stop
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_DISQ">
            <summary>
            Is disqualified
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ConfirmationFlags.CONF_TIME">
            <summary>
            Has time penalty
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.CompCar">
            <summary>
            Class for the <see cref="T:InSimDotNet.Packets.IS_MCI"/> Info collection.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.CompCar.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new CompCar sub-packet.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> containing the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Node">
            <summary>
            Gets the current path node
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Lap">
            <summary>
            Gets the current lap
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Position">
            <summary>
            Gets the current race position : 0 = unknown, 1 = leader, etc...
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Info">
            <summary>
            Gets the car flags and other info
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.X">
            <summary>
            Gets the cars current X coordinate (65536 = 1 metre)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Y">
            <summary>
            Gets the cars current Y coordinate (65536 = 1 metre)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Z">
            <summary>
            Gets the cars current Z coordinate (65536 = 1 metre)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Speed">
            <summary>
            Gets the cars current speed (32768 = 100 m/s)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Direction">
            <summary>
            Gets the direction of car's motion : 0 = world Y direction, 32768 = 180 deg
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.Heading">
            <summary>
            Gets the cars current direction of forward axis : 0 = world Y direction, 32768 = 180 deg
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CompCar.AngVel">
            <summary>
            Gets the cars rate of change of heading : (16384 = 360 deg/s)
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CON">
            <summary>
            Car contact packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CON.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Packets.IS_CON"/> packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CON.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Packets.IS_CON"/> packet.
            </summary>
            <param name="buffer">A buffer containing the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.ReqI">
            <summary>
            Gets the request ID of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.SpClose">
            <summary>
            Gets the closing speed of the two cars (high 4 bits : reserved / low 12 bits : closing speed (10 = 1 m/s)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.Time">
            <summary>
            Gets the timestamp (looping time stamp (hundredths - time since reset - like TINY_GTH)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.A">
            <summary>
            Gets the first car in the collision.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CON.B">
            <summary>
            Gets the second car in the collision.
            </summary>
        </member>
        <member name="T:InSimDotNet.ObjectHelper">
            <summary>
            Static class to help with object names.
            </summary>
        </member>
        <member name="M:InSimDotNet.ObjectHelper.GetObjName(System.Int32)">
            <summary>
            Determines the full name of an object or null if the index does not exist.
            </summary>
            <param name="index">The object's index.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:InSimDotNet.ObjectHelper.GetObjType(System.Int32)">
            <summary>
            Determines the type of the object or returns null if the index does not exist.
            </summary>
            <param name="index">The object's index.</param>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:InSimDotNet.ObjectHelper.ObjExists(System.Int32)">
            <summary>
            Determines if the specified object exists.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>True if the object exists.</returns>
        </member>
        <member name="T:InSimDotNet.TcpSocket">
            <summary>
            Manages a TCP connection with LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.TcpSocket.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.TcpSocket"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Dispose">
            <summary>
            Disposes the <see cref="T:InSimDotNet.TcpSocket"/> object.
            </summary>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:InSimDotNet.TcpSocket"/> object.
            </summary>
            <param name="disposing">Set true to dispose managed resources.</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes the TCP connection with LFS.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to the host through.</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Bind(System.String,System.Int32)">
            <summary>
            Binds the connection to LFS. Not supported with TCP.
            </summary>
            <param name="host">The host where LFS is running.</param>
            <param name="port">The port to bind to the host through.</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Disconnect">
            <summary>
            Disconnects from LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.TcpSocket.Send(System.Byte[])">
            <summary>
            Sends byte data to LFS.
            </summary>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.OnPacketDataReceived(InSimDotNet.PacketDataEventArgs)">
            <summary>
            Raises the PacketDataReceived event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.PacketDataEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.OnConnectionLost(System.EventArgs)">
            <summary>
            Raises the ConnectionLost event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.TcpSocket.OnSocketError(InSimDotNet.InSimErrorEventArgs)">
            <summary>
            Raises the SocketError event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.InSimErrorEventArgs"/> object containing the event data</param>
        </member>
        <member name="E:InSimDotNet.TcpSocket.PacketDataReceived">
            <summary>
            Occurs when packet data is received.
            </summary>
        </member>
        <member name="E:InSimDotNet.TcpSocket.ConnectionLost">
            <summary>
            Occurs when the connection is lost.
            </summary>
        </member>
        <member name="E:InSimDotNet.TcpSocket.SocketError">
            <summary>
            Occurs when an internal socket error occurs.
            </summary>
        </member>
        <member name="P:InSimDotNet.TcpSocket.IsConnected">
            <summary>
            Gets if the socket is connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.TcpSocket.Host">
            <summary>
            Gets the host the socket is connected to.
            </summary>
        </member>
        <member name="P:InSimDotNet.TcpSocket.Port">
            <summary>
            Gets the port the socket is connected to.
            </summary>
        </member>
        <member name="P:InSimDotNet.TcpSocket.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.TinyType">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_TINY"/> SubT.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_NONE">
            <summary>
            Keep alive. Used for maintaining the connection.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_VER">
            <summary>
            Request for a version packet to be sent.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_CLOSE">
            <summary>
            Close InSim.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_PING">
            <summary>
            External program requesting a reply.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_REPLY">
            <summary>
            Reply to a ping request.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_VTC">
            <summary>
            Vote cancelled.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_SCP">
            <summary>
            Send camera pos.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_SST">
            <summary>
            Send state info.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_GTH">
            <summary>
            Get time in hundredths (i.e. SMALL_RTP).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_MPE">
            <summary>
            Multi player end.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_ISM">
            <summary>
            Get multiplayer info (i.e. ISP_ISM).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_REN">
            <summary>
            Race end (return to game setup screen).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_CLR">
            <summary>
            All players cleared from race.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_NCN">
            <summary>
            Get all connections.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_NPL">
            <summary>
            Get all players.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_RES">
            <summary>
            Get all results.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_NLP">
            <summary>
            Send an IS_NLP.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_MCI">
            <summary>
            Send an IS_MCI.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_REO">
            <summary>
            Send an IS_REO.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_RST">
            <summary>
            Send an IS_RST.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_AXI">
            <summary>
            Send an IS_AXI - AutoX Info.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_AXC">
            <summary>
            Autocross cleared.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TinyType.TINY_RIP">
            <summary>
            Send an IS_RIP - Replay Information Packet.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_VER">
            <summary>
            Version packet.
            </summary>
            <remarks>
            Sent in response to a <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_VER.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_VER.#ctor">
            <summary>
            Creates a new version packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_VER.#ctor(System.Byte[])">
            <summary>
            Creates a new version packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.Size">
            <summary>
            Gets the packet size.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.Type">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.Version">
            <summary>
            Gets the LFS version, e.g. 0.3G.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.Product">
            <summary>
            Gets the product : DEMO or S1
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VER.InSimVer">
            <summary>
            Gets the InSim Version : increased when InSim packets change.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_NLP">
            <summary>
            Node and lap packet.
            </summary>
            <remarks>
            Used to provide node and position updates. To enable these packets see 
            the Flags and Interval properties when initializing InSim. 
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NLP.#ctor">
            <summary>
            Creates a new node and lap packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NLP.#ctor(System.Byte[])">
            <summary>
            Creates a new node and lap packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NLP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NLP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NLP.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NLP.NumP">
            <summary>
            Gets the number of <see cref="T:InSimDotNet.Packets.NodeLap"/> packets in the <see cref="T:InSimDotNet.Packets.IS_NLP"/>.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NLP.Info">
            <summary>
            Gets a collection of up to 32 <see cref="T:InSimDotNet.Packets.NodeLap"/> packets.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MSX">
            <summary>
            Message extended packet.
            </summary>
            <remarks>
            Like <see cref="T:InSimDotNet.Packets.IS_MST"/> but longer (cannot be used for commands).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSX.#ctor">
            <summary>
            Creates a new message extended packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSX.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSX.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSX.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSX.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSX.Msg">
            <summary>
            Gets or sets the message to send (up to 96 characters).
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_FLG">
            <summary>
            Flag packet.
            </summary>
            <remarks>
            Sent when yellow or blue flag changes.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_FLG.#ctor">
            <summary>
            Creates a new flag packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_FLG.#ctor(System.Byte[])">
            <summary>
            Creates a new flag packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.PLID">
            <summary>
            Gets the unique ID of the player the flag is being shown to.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.OffOn">
            <summary>
            Gets if the flag is on or off (true = on).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.Flag">
            <summary>
            Gets the flag being caused.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FLG.CarBehind">
            <summary>
            Gets the unique ID of the obstructed player if blue flag.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CNL">
            <summary>
            Connection Leave packet.
            </summary>
            <remarks>
            Sent when a connection leaves the host.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CNL.#ctor">
            <summary>
            Creates a new connection leave packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CNL.#ctor(System.Byte[])">
            <summary>
            Creates a new connection leave packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.ReqI">
            <summary>
            Gets the packet request ID. 
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.UCID">
            <summary>
            Gets the unique id of the connection which left.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.Reason">
            <summary>
            Gets the reason the connection left.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CNL.Total">
            <summary>
            Gets the total number of connections (including host).
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_HOS">
            <summary>
            Host response packet.
            </summary>
            <remarks>
            Sent in reply to <see cref="T:InSimDotNet.Packets.IR_HLR"/> host list request.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_HOS.#ctor(System.Byte[])">
            <summary>
            Creates a new host response packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HOS.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HOS.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HOS.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HOS.NumHosts">
            <summary>
            Gets the number of hosts described in this packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_HOS.Info">
            <summary>
            Gets a collection of up to six <see cref="T:InSimDotNet.Packets.HInfo"/> packets, one for each host in the relay.
            If more than six hosts are online then multiple <see cref="T:InSimDotNet.Packets.IR_HOS"/> packets are sent.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ButtonStyles">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_BTN"/> BStyle.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_C1">
            <summary>
            Choose a standard interface color.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_C2">
            <summary>
            Choose a standard interface color.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_C4">
            <summary>
            Choose a standard interface color.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_CLICK">
            <summary>
            When clicked this button will send a <see cref="T:InSimDotNet.Packets.IS_BTC"/> packet.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_LIGHT">
            <summary>
            Light button.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_DARK">
            <summary>
            Dark button.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_LEFT">
            <summary>
            Align text to left.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonStyles.ISB_RIGHT">
            <summary>
            Align text to right.
            </summary>
        </member>
        <member name="T:InSimDotNet.ReadOnlyInSimSettings">
            <summary>
            Provides a read-only representation of the <see cref="T:InSimDotNet.InSimSettings"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.ReadOnlyInSimSettings.#ctor(InSimDotNet.InSimSettings)">
            <summary>
            Creates a new instance of the  <see cref="T:InSimDotNet.ReadOnlyInSimSettings"/> class.
            </summary>
            <param name="settings">The InSimSettings to make readonly.</param>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Host">
            <summary>
            Gets the address of the remote host.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Port">
            <summary>
            Gets the port of the remote host.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.UdpPort">
            <summary>
            Gets the UDP port to use for <see cref="T:InSimDotNet.Packets.IS_MCI"/> and <see cref="T:InSimDotNet.Packets.IS_NLP"/> packet updates. If set a 
            separate UDP connection will be opened on that port.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Flags">
            <summary>
            Gets the InSim initialization flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Prefix">
            <summary>
            Gets the hidden host command prefix.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Interval">
            <summary>
            Gets the number of milliseconds between <see cref="T:InSimDotNet.Packets.IS_MCI"/> or <see cref="T:InSimDotNet.Packets.IS_NLP"/> packets.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.Admin">
            <summary>
            Gets the LFS game admin password.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.IName">
            <summary>
            Gets a short name for the program.
            </summary>
        </member>
        <member name="P:InSimDotNet.ReadOnlyInSimSettings.IsRelayHost">
            <summary>
            Gets if the host is an InSim Relay host. If true all other settings are ignored.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PlayerTypes">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_NPL"/> PType.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerTypes.PLT_FEMALE">
            <summary>
            Player is female.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerTypes.PLT_AI">
            <summary>
            Player is AI.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerTypes.PLT_REMOTE">
            <summary>
            Player is remote.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ObjectInfo">
            <summary>
            Class for the <see cref="T:InSimDotNet.Packets.IS_AXM"/> Info collection.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.ObjectInfo.#ctor">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.ObjectInfo"/> object.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.ObjectInfo.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new ObjectInfo object.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> containing packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.ObjectInfo.GetBuffer(InSimDotNet.PacketWriter)">
            <summary>
            Writes the <see cref="T:InSimDotNet.Packets.ObjectInfo"/> object to the specified <see cref="T:InSimDotNet.PacketWriter"/>
            </summary>
            <param name="writer">The <see cref="T:InSimDotNet.PacketWriter"/> to write the data to.</param>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.X">
            <summary>
            Gets or sets the X position of the object (1 meter = 16)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.Y">
            <summary>
            Gets or sets the Y position of the object (1 meter = 16)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.Zchar">
            <summary>
            Gets or sets the height of the object.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.Flags">
            <summary>
            Gets or sets the object flags (always 0 for objects).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.Index">
            <summary>
            Gets or sets the object index.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.ObjectInfo.Heading">
            <summary>
            Gets or sets the object heading.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_HLV">
            <summary>
            Hot Lap Validity - illegal ground / hit wall / speeding in pit lane
            </summary>
            <remarks>
             Set the ISP_HLV flag in the IS_ISI to receive reports of incidents that would violate HLVC
             </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_HLV.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_HLV"/> object.
            </summary>
            <param name="buffer">The data to populate the packet with.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.Size">
            <summary>
            Gets the packet size.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.Type">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.HLVC">
            <summary>
            Gets why the lap is invalid.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.Time">
            <summary>
            Gets the looping time stamp (time since reset - like TINY_GTH).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_HLV.C">
            <summary>
            Gets the car contact object.
            </summary>
        </member>
        <member name="T:InSimDotNet.StringResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimConnectedMessage">
            <summary>
              Looks up a localized string similar to InSim is already connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimConnectionLostMessage">
            <summary>
              Looks up a localized string similar to Lost connection to InSim..
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimCouldNotConnectMessage">
            <summary>
              Looks up a localized string similar to Could not connect to InSim.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimInvalidVersionMessage">
            <summary>
              Looks up a localized string similar to Invalid InSim version.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimNotConnectedMessage">
            <summary>
              Looks up a localized string similar to InSim is not connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.InSimRelayUdpErrorMessage">
            <summary>
              Looks up a localized string similar to Cannot connect to InSim Relay with UDP.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.IsAxmInfoErrorMessage">
            <summary>
              Looks up a localized string similar to IS_AXM more than max 30 objects set.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.IsReoPlidErrorMessage">
            <summary>
              Looks up a localized string similar to IS_REO more than max 32 PLIDs set.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.PacketSizeErrorMessage">
            <summary>
              Looks up a localized string similar to Packet size was not a multiple of four.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.TcpSocketDebugErrorMessage">
            <summary>
              Looks up a localized string similar to TCP Receive Error: {0}.
            </summary>
        </member>
        <member name="P:InSimDotNet.StringResources.UdpSocketDebugErrorMessage">
            <summary>
              Looks up a localized string similar to UDP Receive Error: {0}.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.StateFlags">
            <summary>
            Represents the state flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_GAME">
            <summary>
            In game (or MPR).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_REPLAY">
            <summary>
            In SPR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_PAUSED">
            <summary>
            Paused.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_SHIFTU">
            <summary>
            In Shift-U mode.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_16">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_SHIFTU_FOLLOW">
            <summary>
            Following car.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_SHIFTU_NO_OPT">
            <summary>
            Shift-U buttons hidden.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_SHOW_2D">
            <summary>
            Showing 2D display.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_FRONT_END">
            <summary>
            Entry screen.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_MULTI">
            <summary>
            Multiplayer mode.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_MPSPEEDUP">
            <summary>
            Multiplayer speedup option.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_WINDOWED">
            <summary>
            LFS running in a window.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_SOUND_MUTE">
            <summary>
            Sound if switched off.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_VIEW_OVERRIDE">
            <summary>
            Override user view.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.StateFlags.ISS_VISIBLE">
            <summary>
            InSim buttons visible.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.NodeLap">
            <summary>
            Car info.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.NodeLap.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new NodeLap sub-packet.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.NodeLap.Node">
            <summary>
            Gets the current path node.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.NodeLap.Lap">
            <summary>
            Gets the current lap.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.NodeLap.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.NodeLap.Position">
            <summary>
            Gets the current race position.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_TINY">
            <summary>
            General purpose packet four-byte packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_TINY.#ctor">
            <summary>
            Creates a new general purpose packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_TINY.#ctor(System.Byte[])">
            <summary>
            Creates a new general purpose packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_TINY.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TINY.Size">
            <summary>
            Gets the packet size.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TINY.Type">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TINY.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TINY.SubT">
            <summary>
            Gets or sets the sub-type.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_STA">
            <summary>
            State packet.
            </summary>
            <remarks>
            Sent when LFS state changes. To request one to be sent send a 
            <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_SST.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_STA.#ctor">
            <summary>
            Creates a new state packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_STA.#ctor(System.Byte[])">
            <summary>
            Creates a new state packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.ReplaySpeed">
            <summary>
            Gets the current replay speed.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Flags">
            <summary>
            Gets the state flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.InGameCam">
            <summary>
            Gets the current view.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.ViewPLID">
            <summary>
            Gets the unique ID of the currently viewed player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.NumP">
            <summary>
            Gets the number of players in the race.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.NumConns">
            <summary>
            Gets the number of connections on the host.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.NumFinished">
            <summary>
            Gets the number of players who have finished the race.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.RaceInProg">
            <summary>
            Gets if the race is in progress (0 - no race / 1 - race / 2 - qualifying).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.QualMins">
            <summary>
            Gets the qualifying minutes of the race.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.RaceLaps">
            <summary>
            Gets the race laps.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Track">
            <summary>
            Gets the current track.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Weather">
            <summary>
            Gets the current weather.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_STA.Wind">
            <summary>
            Gets the current wind.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ActionFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_AXM"/> PMOAction flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ActionFlags.PMO_LOADING_FILE">
            <summary>
            Sent by the layout loading system only.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ActionFlags.PMO_ADD_OBJECTS">
            <summary>
            Adding objects (from InSim or editor).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ActionFlags.PMO_DEL_OBJECTS">
            <summary>
            Delete objects (from InSim or editor).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ActionFlags.PMO_CLEAR_ALL">
            <summary>
            Clear all objects (NumO must be zero).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ActionFlags.PMO_NUM">
            <summary>
            Huh?
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutSimEventArgs">
            <summary>
            Provides data for the OutSim PacketReceived event.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutSimEventArgs.#ctor(InSimDotNet.Out.OutSimPack)">
            <summary>
            Creates a new OutSimEventArgs object.
            </summary>
            <param name="packet">The OutSim packet.</param>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Packet">
            <summary>
            Gets the OutSim packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Time">
            <summary>
            Gets the time in milliseconds (to check order).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.AngVel">
            <summary>
            Gets the angular velocity.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Heading">
            <summary>
            Gets the current heading (anticlockwise from above (Z)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Pitch">
            <summary>
            Gets the current pitch (anticlockwise from right (X)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Roll">
            <summary>
            Gets the current roll (anticlockwise from front (Y)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Accel">
            <summary>
            Gets the current acceleration.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Vel">
            <summary>
            Gets the current velocity.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.Pos">
            <summary>
            Gets the current position (1m = 65536).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimEventArgs.ID">
            <summary>
            Gets the optional OutSim ID (if specified in cfg.txt).
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutGaugePack">
            <summary>
            Class to represent an OutGauge packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutGaugePack.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutGaugePack"/> class.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Time">
            <summary>
            Gets the time (to check order).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Car">
            <summary>
            Gets the car name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Flags">
            <summary>
            Gets the OutGauge info flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Gear">
            <summary>
            Gets the current gear (reverse: 0, neutral: 1, first: 2 etc..).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.PLID">
            <summary>
            Gets the PLID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Speed">
            <summary>
            Gets the speed in meters per second.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.RPM">
            <summary>
            Gets the RPM.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Turbo">
            <summary>
            Gets the turbo BAR.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.EngTemp">
            <summary>
            Gets the engine temperature in degrees centigrade. 
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Fuel">
            <summary>
            Gets the fuel (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.OilPressure">
            <summary>
            Gets the oil pressure in BAR.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.OilTemp">
            <summary>
            Gets the oil temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.DashLights">
            <summary>
            Gets which dashboard lights available for this car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.ShowLights">
            <summary>
            Gets the dashboard lights currently switched on.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Throttle">
            <summary>
            Gets the throttle position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Brake">
            <summary>
            Gets the brake position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Clutch">
            <summary>
             Gets the clutch position (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Display1">
            <summary>
            Gets the first LCD display (usually fuel).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.Display2">
            <summary>
            Gets the second LCD display (usually settings).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutGaugePack.ID">
            <summary>
            Gets the optional OutGauge ID (if specified in cfg.txt).
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_VTN">
            <summary>
            Vote notify.
            </summary>
            <remarks>
            Sent when a vote is initiated. When the vote is completed LFS sends a 
            <see cref="T:InSimDotNet.Packets.IS_SMALL"/> with a SubT of SMALL_VTA. To cancel a vote send 
            a <see cref="T:InSimDotNet.Packets.IS_TINY"/> with a SubT of TINY_VTC.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_VTN.#ctor">
            <summary>
            Creates a new vote notify.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_VTN.#ctor(System.Byte[])">
            <summary>
            Creates a new vote notify.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VTN.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VTN.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VTN.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VTN.UCID">
            <summary>
            Gets or sets the unique ID of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_VTN.Action">
            <summary>
            Gets or sets the vote action.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PLL">
            <summary>
            Player leave packet.
            </summary>
            <remarks>
            Sent when player leaves race (spectated, removed from player list).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLL.#ctor">
            <summary>
            Creates a new player leave packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLL.#ctor(System.Byte[])">
            <summary>
            Creates a new player leave packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLL.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLL.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_ISI">
            <summary>
            InSim initialization packet.
            </summary>
            <remarks>
            Sent to initialize the InSim system.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_ISI.#ctor">
            <summary>
            Creates a new InSim initialization packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_ISI.GetBuffer">
            <summary>
            Returns the packet data as an array of bytes.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Type">
            <summary>
            Gets the <see cref="T:InSimDotNet.Packets.PacketType"/>.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.ReqI">
            <summary>
            Gets or sets the packet request ID. If set to non-zero LFS will respond with a <see cref="T:InSimDotNet.Packets.IS_VER"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.UDPPort">
            <summary>
            Gets or sets the port for UDP replies from LFS (0 to 65535).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Flags">
            <summary>
            Gets or sets the InSim initialization options.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Prefix">
            <summary>
            Gets or sets the special host message prefix character.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Interval">
            <summary>
            Gets or sets the time in milliseconds between NLP or MCI packets (0 = none).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.Admin">
            <summary>
            Gets or sets the admin password (if set in LFS).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ISI.IName">
            <summary>
            Gets or sets a short name for the program.
            </summary>
        </member>
        <member name="T:InSimDotNet.StringHelper">
            <summary>
            Static class to help with LFS related string operations.
            </summary>
        </member>
        <member name="M:InSimDotNet.StringHelper.StripColors(System.String)">
            <summary>
            Strips color codes from a string.
            </summary>
            <param name="value">The string to strip.</param>
            <returns>The resulting string, sans colors.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ToLapTimeString(System.TimeSpan)">
            <summary>
            Converts time into a formatted LFS lap time string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The formatted time string.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ToLapTimeString(System.TimeSpan,System.Boolean)">
            <summary>
            Converts time into a formatted LFS lap time string.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="hours">Set true to force the hours component of the time.</param>
            <returns>The formatted time string.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ToTimeString(System.TimeSpan)">
            <summary>
            Converts a TimeSpan to a formatted time string.
            </summary>
            <param name="value">The TimeSpan to convert.</param>
            <returns>The formatted time string.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ToTimeString(System.TimeSpan,System.Boolean)">
            <summary>
            Converts a TimeSpan to a formatted time string.
            </summary>
            <param name="value">The TimeSpan to convert.</param>
            <param name="hours">Set true to force the hours component of the time.</param>
            <returns>The formatted time string.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ValidHost(System.String)">
            <summary>
            Determines if a string contains a valid IP address.
            </summary>
            <param name="value">The IP string to check.</param>
            <returns>True if the host is valid.</returns>
        </member>
        <member name="M:InSimDotNet.StringHelper.ValidPort(System.String)">
            <summary>
            Determines if a string contains a valid port number.
            </summary>
            <param name="value">The port string to check.</param>
            <returns>True if the port is valid.</returns>
        </member>
        <member name="T:InSimDotNet.Packets.Tyres">
            <summary>
            Represents car tyres.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.#ctor(InSimDotNet.Packets.TyreCompound,InSimDotNet.Packets.TyreCompound,InSimDotNet.Packets.TyreCompound,InSimDotNet.Packets.TyreCompound)">
            <summary>
            Creates a new Tyres object.
            </summary>
            <param name="frontLeft">The front-left tyre</param>
            <param name="frontRight">The front-right tyre</param>
            <param name="rearLeft">The rear-left tyre</param>
            <param name="rearRight">The rear-right tyre</param>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.Equals(InSimDotNet.Packets.Tyres)">
            <summary>
            Returns if two tyres are equal.
            </summary>
            <param name="other">The tyre to check for equality.</param>
            <returns>True if the tyres are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.Equals(System.Object)">
            <summary>
            Returns if two objects equal.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.op_Equality(InSimDotNet.Packets.Tyres,InSimDotNet.Packets.Tyres)">
            <summary>
            Returns if two tyres are equal.
            </summary>
            <param name="a">The first tyre.</param>
            <param name="b">The second tyre.</param>
            <returns>True of the tyres are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Packets.Tyres.op_Inequality(InSimDotNet.Packets.Tyres,InSimDotNet.Packets.Tyres)">
            <summary>
            Returns if two vectors are not-equal.
            </summary>
            <param name="a">The first tyre.</param>
            <param name="b">The second tyre.</param>
            <returns>True of the tyres are not-equal.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.Tyres.FrontLeft">
            <summary>
            Gets the front-left tyre.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.Tyres.FrontRight">
            <summary>
            Gets the front-right tyre.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.Tyres.RearLeft">
            <summary>
            Gets the rear-left tyre.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.Tyres.RearRight">
            <summary>
            Gets the rear-right tyre.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ObjectFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_OBH"/> OBHFlags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ObjectFlags.OBH_LAYOUT">
            <summary>
            An added object.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ObjectFlags.OBH_CAN_MOVE">
            <summary>
            A movable object.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ObjectFlags.OBH_WAS_MOVING">
            <summary>
            Was moving before this hit.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ObjectFlags.OBH_ON_SPOT">
            <summary>
            Object in original position.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_ACR">
            <summary>
            Admin Command Report
            </summary>
            <remarks>
            Any user typed an admin command.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_ACR.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_ACR"/> object.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.UCID">
            <summary>
            Gets the unique ID of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.Admin">
            <summary>
            Gets if the user is an admin.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.Result">
            <summary>
            Gets whether the command was processed or not.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_ACR.Text">
            <summary>
            Gets the admin command text.
            </summary>
        </member>
        <member name="T:InSimDotNet.DisconnectReason">
            <summary>
            Specifies the disconnect reason for the <see cref="T:InSimDotNet.DisconnectedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:InSimDotNet.DisconnectReason.Lost">
            <summary>
            The connection with LFS was been lost (disconnected etc..).
            </summary>
        </member>
        <member name="F:InSimDotNet.DisconnectReason.Request">
            <summary>
            The connection was closed by request.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_RES">
            <summary>
            Result packet.
            </summary>
            <remarks>
            Sent when the players result is confirmed, either at race finished or 
            qualifying lap completed.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RES.#ctor">
            <summary>
            Creates a new result packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RES.#ctor(System.Byte[])">
            <summary>
            Creates a new result packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.UName">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.PName">
            <summary>
            Gets the player name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.Plate">
            <summary>
            Gets the number plate of the car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.CName">
            <summary>
            Gets the car name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.TTime">
            <summary>
            Gets the total race time.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.BTime">
            <summary>
            Gets the best lap time.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.NumStops">
            <summary>
            Gets the number of pit stops.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.Confirm">
            <summary>
            Gets the confirmation flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.LapsDone">
            <summary>
            Gets the laps completed.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.Flags">
            <summary>
            Gets the player flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.ResultNum">
            <summary>
            Gets the finish or qualify position (0 = win / 255 = not added to table).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.NumRes">
            <summary>
            Gets the total number of results.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RES.PSeconds">
            <summary>
            Gets the penalty seconds.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_SEL">
            <summary>
            Select host packet.
            </summary>
            <remarks>
            Used to to select a InSim relay host.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_SEL.#ctor">
            <summary>
            Creates a new select host packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IR_SEL.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.ReqI">
            <summary>
            Gets or sets the request ID. If set InSim Relay will reply with an <see cref="T:InSimDotNet.Packets.IS_VER"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.HName">
            <summary>
            Gets or sets the name of the host to select (with or without colors).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.Admin">
            <summary>
            Gets or sets the host admin password (to gain admin access to host).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_SEL.Spec">
            <summary>
            Gets or sets the spectator password, if required by the host.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.HostFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.HInfo"/> Flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_SPECPASS">
            <summary>
            Host requires a spectator password
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_LICENSED">
            <summary>
            Host is licensed (S1, S2 etc..)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_S1">
            <summary>
            Host is S1
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_S2">
            <summary>
            Host is S2
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_FIRST">
            <summary>
            First <see cref="T:InSimDotNet.Packets.HInfo"/> in this set of <see cref="T:InSimDotNet.Packets.IR_HOS"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostFlags.HOS_LAST">
            <summary>
            Last <see cref="T:InSimDotNet.Packets.HInfo"/> in this set of <see cref="T:InSimDotNet.Packets.IR_HOS"/> packets.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ButtonFunction">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_BFN"/> SubT.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonFunction.BFN_DEL_BTN">
            <summary>
            Delete one button (must set ClickID).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonFunction.BFN_CLEAR">
            <summary>
            Clear all buttons made by this InSim instance.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonFunction.BFN_USER_CLEAR">
            <summary>
             User cleared this InSim instance's buttons.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ButtonFunction.BFN_REQUEST">
            <summary>
            SHIFT+B or SHIFT+I - request for buttons.
            </summary>
        </member>
        <member name="T:InSimDotNet.Vec">
            <summary>
            Represents a vector in three-dimensional space.
            </summary>
        </member>
        <member name="M:InSimDotNet.Vec.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Vector type.
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The Z coordinate</param>
        </member>
        <member name="M:InSimDotNet.Vec.Equals(InSimDotNet.Vec)">
            <summary>
            Returns if two vectors are equal.
            </summary>
            <param name="other">The vector to check for equality.</param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vec.Equals(System.Object)">
            <summary>
            Returns if two objects equal.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vec.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InSimDotNet.Vec.op_Equality(InSimDotNet.Vec,InSimDotNet.Vec)">
            <summary>
            Returns if two vectors are equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True of the vectors are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vec.op_Inequality(InSimDotNet.Vec,InSimDotNet.Vec)">
            <summary>
            Returns if two vectors are not-equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True of the vectors are not-equal.</returns>
        </member>
        <member name="P:InSimDotNet.Vec.X">
            <summary>
            Gets the X coordinate.
            </summary>
        </member>
        <member name="P:InSimDotNet.Vec.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
        </member>
        <member name="P:InSimDotNet.Vec.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
        </member>
        <member name="T:InSimDotNet.InSimException">
            <summary>
            Generic exception thrown by InSim.NET.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimException"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimException"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimException"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimException"/> class..
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PitWorkFlags">
            <summary>
            Represents the pit work flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_NOTHING">
            <summary>
            No work done.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_STOP">
            <summary>
            Stopped at pit-box.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_FR_DAM">
            <summary>
            Front damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_FR_WHL">
            <summary>
            Front wheels changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_LE_FR_DAM">
            <summary>
            Left-front damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_LE_FR_WHL">
            <summary>
            Left-front wheels changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RI_FR_DAM">
            <summary>
            Right-front damaged.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RI_FR_WHL">
            <summary>
            Right-front wheel changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RE_DAM">
            <summary>
            Rear damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RE_WHL">
            <summary>
            Rear wheels changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_LE_RE_DAM">
            <summary>
            Left-rear damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_LE_RE_WHL">
            <summary>
            Left-rear wheel changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RI_RE_DAM">
            <summary>
            Right-rear damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_RI_RE_WHL">
            <summary>
            Right-rear wheel changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_BODY_MINOR">
            <summary>
            Minor body damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_BODY_MAJOR">
            <summary>
            Major body damage.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_SETUP">
            <summary>
            Setup changed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitWorkFlags.PSE_REFUEL">
            <summary>
            Refuelled.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MST">
            <summary>
            Message type packet.
            </summary>
            <remarks>
            Used to type message or command into LFS.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MST.#ctor">
            <summary>
            Creates a new message type packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MST.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MST.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MST.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MST.ReqI">
            <summary>
            Gets or sets the packet request ID. 
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MST.Msg">
            <summary>
            Gets or sets the message to send (up to 64 characters).
            </summary>
        </member>
        <member name="T:InSimDotNet.InSimSettings">
            <summary>
            Provides initialization settings for the <see cref="T:InSimDotNet.InSim"/> connection with LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimSettings"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimSettings.SaveToXml(InSimDotNet.InSimSettings,System.String)">
            <summary>
            Saves an instance of <see cref="T:InSimDotNet.InSimSettings"/> to an XML file.
            </summary>
            <param name="settings">The instance of <see cref="T:InSimDotNet.InSimSettings"/> to save.</param>
            <param name="path">The full path to where the XML file will be written.</param>
        </member>
        <member name="M:InSimDotNet.InSimSettings.LoadFromXml(System.String)">
            <summary>
            Loads an instance of <see cref="T:InSimDotNet.InSimSettings"/> from an XML file.
            </summary>
            <param name="path">The full path to the XML file on disk.</param>
            <returns>A populated <see cref="T:InSimDotNet.InSimSettings"/> object.</returns>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Host">
            <summary>
            Gets or set the address of the remote host.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Port">
            <summary>
            Gets or sets the port of the remote host.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.UdpPort">
            <summary>
            Gets or sets the UDP port to use for <see cref="T:InSimDotNet.Packets.IS_MCI"/> and <see cref="T:InSimDotNet.Packets.IS_NLP"/> packet updates. If set a 
            separate UDP connection will be opened on that port.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Flags">
            <summary>
            Gets or sets the InSim initialization flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Prefix">
            <summary>
            Gets or sets the hidden host command prefix.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Interval">
            <summary>
            Gets or sets the number of milliseconds between <see cref="T:InSimDotNet.Packets.IS_MCI"/> or <see cref="T:InSimDotNet.Packets.IS_NLP"/> packets.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.Admin">
            <summary>
            Gets or sets the LFS game admin password.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.IName">
            <summary>
            Gets or sets a short name for the program.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSimSettings.IsRelayHost">
            <summary>
            Gets or sets if the host is an InSim Relay host. If true all other settings are ignored.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MTC">
            <summary>
            Message to connection packet.
            </summary>
            <remarks>
            Used to send a message to a specific connection or player (can only be used on hosts).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MTC.#ctor">
            <summary>
            Creates a new message to connection packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MTC.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.Sound">
            <summary>
            Gets or sets the sound effect.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.UCID">
            <summary>
            Gets or sets the unique ID of the connection to send the message to (0 = host / 255 = all).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.PLID">
            <summary>
            Gets or sets the unique ID of the player to send the message to (if 0 use UCID).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MTC.Msg">
            <summary>
            Gets or sets the message to send.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_BTN">
            <summary>
            InSim Button packet.
            </summary>
            <remarks>
            Used to send a button to InSim.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTN.#ctor">
            <summary>
            Creates a new button packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BTN.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.ReqI">
            <summary>
            Gets or sets the packet request ID (returned in <see cref="T:InSimDotNet.Packets.IS_BTC"/> and <see cref="T:InSimDotNet.Packets.IS_BTT"/> packets).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.UCID">
            <summary>
            Gets or sets the connection to display the button to (0 = local / 255 = all).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.ClickID">
            <summary>
            Gets or sets the unique button click ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.Inst">
            <summary>
            Used internally by InSim.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.BStyle">
            <summary>
            Gets or sets the button style flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.TypeIn">
            <summary>
            Gets or sets the max characters the user is allowed to type in. Setting this to non-zero turns
            the button into a text-entry prompt.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.L">
            <summary>
            Gets or sets the distance from the left of the screen the button will be displayed (0 to 200).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.T">
            <summary>
            Gets or sets the distance from the top of the screen the button will be displayed (0 to 200).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.W">
            <summary>
            Gets or sets the width of the button (0 to 200).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.H">
            <summary>
            Gets or sets the height of the button (0 to 200).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.Text">
            <summary>
            Gets or sets the text of the button.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BTN.Caption">
            <summary>
            Gets or sets the caption for a type-in button. Only used if TypeIn is set to non-zero.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.InSimFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_ISI"/> Flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_RES_0">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_RES_1">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_LOCAL">
            <summary>
            Guest or single player.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_MSO_COLS">
            <summary>
            Keep colors in <see cref="T:InSimDotNet.Packets.IS_MSO"/> packet text.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_NLP">
            <summary>
            Enable <see cref="T:InSimDotNet.Packets.IS_NLP"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_MCI">
            <summary>
            Enable <see cref="T:InSimDotNet.Packets.IS_MCI"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_CON">
            <summary>
            Enable <see cref="T:InSimDotNet.Packets.IS_CON"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_OBH">
            <summary>
            Enable <see cref="T:InSimDotNet.Packets.IS_OBH"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_HLV">
            <summary>
            Enable <see cref="T:InSimDotNet.Packets.IS_HLV"/> packets.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_AXM_LOAD">
            <summary>
            Enable receive AXM when loading layout.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.InSimFlags.ISF_AXM_EDIT">
            <summary>
            Enable receive AXM when changing objects.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.CompCarFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.CompCar"/> Info.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CompCarFlags.CCI_BLUE">
            <summary>
            This car is in the way of a driver who is a lap ahead
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CompCarFlags.CCI_YELLOW">
            <summary>
            This car is slow or stopped and in a dangerous place
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CompCarFlags.CCI_LAG">
            <summary>
            This car is lagging (missing or delayed position packets)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CompCarFlags.CCI_FIRST">
            <summary>
            This is the first <see cref="T:InSimDotNet.Packets.CompCar"/> in this set of <see cref="T:InSimDotNet.Packets.IS_MCI"/> packets
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CompCarFlags.CCI_LAST">
            <summary>
            This is the last <see cref="T:InSimDotNet.Packets.CompCar"/> in this set of <see cref="T:InSimDotNet.Packets.IS_MCI"/> packets
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.CharacterModifiers">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_SCH"/> flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CharacterModifiers.SHIFT">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CharacterModifiers.CTRL">
            <summary>
            Control key.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.CarFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_PLC"/> Cars property.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.None">
            <summary>
            No cars.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.XFG">
            <summary>
            XF GTI.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.XRG">
            <summary>
            XR GT.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.XRT">
            <summary>
            XR GT TURBO.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.RB4">
            <summary>
            RB4 GT.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FXO">
            <summary>
            FXO TURBO.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.LX4">
            <summary>
            LX4.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.LX6">
            <summary>
            LX6.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.MRT">
            <summary>
            MRT5.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.UF1">
            <summary>
            UF 1000.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.RAC">
            <summary>
            Raceabout.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FZ5">
            <summary>
            FZ50.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FOX">
            <summary>
            FORMULA XR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.XFR">
            <summary>
            XF GTR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.UFR">
            <summary>
            UF GTR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FO8">
            <summary>
            FORMULA V8.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FXR">
            <summary>
            FXO GTR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.XRR">
            <summary>
            XR GTR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FZR">
            <summary>
            FZ50 GTR.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.BF1">
            <summary>
            BMW SAUBER F1.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.FBM">
            <summary>
            FORMULA BMW FB02.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.CarFlags.All">
            <summary>
            All cars.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.AdminResult">
            <summary>
            Represents <see cref="T:InSimDotNet.Packets.IS_ACR"/> Result.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.AdminResult.Processed">
            <summary>
            Admin command has been processed.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.AdminResult.Rejected">
            <summary>
            Admin command was rejected.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.AdminResult.Unknown">
            <summary>
            The admin command was not recognised.
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketReader">
            <summary>
            Class to handle reading a packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.PacketReader.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.PacketReader"/> class.
            </summary>
            <param name="buffer">An array of bytes containing the packet data.</param>
        </member>
        <member name="M:InSimDotNet.PacketReader.Skip(System.Int32)">
            <summary>
            Skips the specified bytes.
            </summary>
            <param name="count">The number of bytes to skip.</param>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadByte">
            <summary>
            Reads a byte from the buffer.
            </summary>
            <returns>A single byte.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadChar">
            <summary>
            Reads a char from the buffer.
            </summary>
            <returns>A single char.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadBytes(System.Int32)">
            <summary>
            Reads a sequence of bytes from the buffer.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadUInt16">
            <summary>
            Reads a word from the buffer.
            </summary>
            <returns>A 2-byte unsigned integer.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadInt16">
            <summary>
            Reads a short from the buffer.
            </summary>
            <returns>A 2-byte signed integer</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadUInt32">
            <summary>
            Reads a unsigned from the buffer.
            </summary>
            <returns>A 4-byte unsigned integer</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadInt32">
            <summary>
            Reads an integer from the buffer.
            </summary>
            <returns>A 4-byte signed integer</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadSingle">
            <summary>
            Reads a float from the buffer.
            </summary>
            <returns>A 4-byte floating point number</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadString(System.Int32)">
            <summary>
            Reads a LFS encoded string from the buffer.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A Unicode string.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadBoolean">
            <summary>
            Reads a Boolean from the buffer.
            </summary>
            <returns>A Boolean.</returns>
        </member>
        <member name="M:InSimDotNet.PacketReader.ReadSByte">
            <summary>
            Reads a signed byte from the buffer.
            </summary>
            <returns>An signed byte.</returns>
        </member>
        <member name="T:InSimDotNet.CarHelper">
            <summary>
            Static class to help with car names.
            </summary>
        </member>
        <member name="M:InSimDotNet.CarHelper.GetFullCarName(System.String)">
            <summary>
            Determines the full name of a car or null if the car does not exist.
            </summary>
            <param name="shortCarName">The cars short car name.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:InSimDotNet.CarHelper.TryGetFullCarName(System.String,System.String@)">
            <summary>
            Tries to determine the full name of the specified car.
            </summary>
            <param name="shortCarName">The short name for the car.</param>
            <param name="fullCarName">The full name for the car.</param>
            <returns>True if the car exists.</returns>
        </member>
        <member name="M:InSimDotNet.CarHelper.CarExists(System.String)">
            <summary>
            Determines if the specified car exists.
            </summary>
            <param name="shortCarName">The short name of the car.</param>
            <returns>True if the car exists.</returns>
        </member>
        <member name="P:InSimDotNet.CarHelper.FullCarNames">
            <summary>
            Gets all full car names.
            </summary>
        </member>
        <member name="P:InSimDotNet.CarHelper.ShortCarNames">
            <summary>
            Gets all short car names;
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PenaltyReason">
            <summary>
            Represents the penalty reason.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_UNKNOWN">
            <summary>
            Unknown or cleared penalty
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_ADMIN">
            <summary>
            Penalty given by admin
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_WRONG_WAY">
            <summary>
            Wrong way driving
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_FALSE_START">
            <summary>
            Starting before green light
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_SPEEDING">
            <summary>
            Speeding in pit lane
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_STOP_SHORT">
            <summary>
            Stop-go pit stop too short
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyReason.PENR_STOP_LATE">
            <summary>
            Compulsory stop is too late
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SFP">
            <summary>
            State flags packet.
            </summary>
            <remarks>
            Used to set LFS state.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SFP.#ctor">
            <summary>
            Creates a new state flags packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SFP.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SFP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SFP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SFP.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SFP.Flag">
            <summary>
            Gets or sets the state flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SFP.OffOn">
            <summary>
            Gets or sets if the flag is on or off.
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketDataEventArgs">
            <summary>
            Provides data for the <see cref="T:InSimDotNet.ISocket"/> PacketDataReceived event.
            </summary>
        </member>
        <member name="M:InSimDotNet.PacketDataEventArgs.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.PacketDataEventArgs"/> class.
            </summary>
            <param name="buffer">An array of bytes containing the packet data.</param>
        </member>
        <member name="M:InSimDotNet.PacketDataEventArgs.GetBuffer">
            <summary>
            Returns the packet buffer.
            </summary>
            <returns>An array of bytes containing the packet data.</returns>
        </member>
        <member name="T:InSimDotNet.TrackHelper">
            <summary>
            Static class to help with track names.
            </summary>
        </member>
        <member name="M:InSimDotNet.TrackHelper.GetFullTrackName(System.String)">
            <summary>
            Returns the full name of a track or null if the track does not exist.
            </summary>
            <param name="shortTrackName">The tracks short code name.</param>
            <returns>The tracks full name.</returns>
        </member>
        <member name="M:InSimDotNet.TrackHelper.TryGetFullTrackName(System.String,System.String@)">
            <summary>
            Tries to determine the full name of the specified track.
            </summary>
            <param name="shortTrackName">The short name for the track.</param>
            <param name="fullTrackName">The full name of the track.</param>
            <returns>True if the track exists.</returns>
        </member>
        <member name="M:InSimDotNet.TrackHelper.TrackExists(System.String)">
            <summary>
            Determines if the specified track exists.
            </summary>
            <param name="shortTrackName">The short name of the track.</param>
            <returns>True if the track exists.</returns>
        </member>
        <member name="P:InSimDotNet.TrackHelper.FullTrackNames">
            <summary>
            Gets all full track names.
            </summary>
        </member>
        <member name="P:InSimDotNet.TrackHelper.ShortTrackNames">
            <summary>
            Gets all short track names.
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketWriter">
            <summary>
            Class to manage writing a packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.PacketWriter.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.PacketWriter"/> class.
            </summary>
            <param name="size">The size of the packet that will be written.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.GetBuffer">
            <summary>
            Returns the underlying buffer.
            </summary>
            <returns>An array of bytes representing the packet.</returns>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Skip(System.Int32)">
            <summary>
            Skips the specified bytes.
            </summary>
            <param name="count">The number of bytes to skip.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Byte)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A single byte.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.SByte)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A single signed byte.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Byte[])">
            <summary>
            Writes the specified sequence of bytes to the buffer.
            </summary>
            <param name="value">An array of bytes to write</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified sequence of bytes to the buffer.
            </summary>
            <param name="value">An array of bytes to write</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.UInt16)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A 2-byte unsigned short.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Int16)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A 2-byte signed short.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.UInt32)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A 4-byte unsigned integer.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Int32)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A 4-byte signed integer.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Single)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A 4-byte floating point number.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Char)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A single character.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.String,System.Int32)">
            <summary>
            Writes the specified Unicode string to the buffer as a LFS encoded string.
            </summary>
            <param name="value">A Unicode string.</param>
            <param name="length">The maximum length of the string to write.</param>
        </member>
        <member name="M:InSimDotNet.PacketWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value to the buffer.
            </summary>
            <param name="value">A Boolean.</param>
        </member>
        <member name="T:InSimDotNet.Packets.CarContOBJ">
            <summary>
            Class to represent the <see cref="T:InSimDotNet.Packets.IS_OBH"/> C field.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.CarContOBJ.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.CarContOBJ"/> object.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> contaning the data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.CarContOBJ.Direction">
            <summary>
            Gets the car's motion if Speed > 0 : 0 = world y direction, 128 = 180 deg.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContOBJ.Heading">
            <summary>
            Gets the direction of forward axis : 0 = world y direction, 128 = 180 deg.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContOBJ.Speed">
            <summary>
            Gets the speed in meters per second.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContOBJ.X">
            <summary>
            Gets the X position (1 meter = 16).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContOBJ.Y">
            <summary>
            Gets the Y position  (1 metre = 16).
            </summary>
        </member>
        <member name="T:InSimDotNet.IPacketFactory">
            <summary>
            Provides support for creating InSim packets.
            </summary>
        </member>
        <member name="M:InSimDotNet.IPacketFactory.BuildPacket(System.Byte[])">
            <summary>
            Builds a new instance of <see cref="T:InSimDotNet.Packets.IPacket"/> from the specified buffer.
            </summary>
            <param name="buffer">The buffer containing the packet data.</param>
            <returns>An instance of <see cref="T:InSimDotNet.Packets.IPacket"/>.</returns>
        </member>
        <member name="M:InSimDotNet.IPacketFactory.PacketLookup(System.Type)">
            <summary>
            Looks up <see cref="T:InSimDotNet.Packets.PacketType"/> information for the specified type.
            </summary>
            <param name="type">The type to lookup</param>
            <returns>The <see cref="T:InSimDotNet.Packets.PacketType"/>.</returns>
        </member>
        <member name="T:InSimDotNet.Packets.VoteAction">
            <summary>
            Represents the vote actions.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.VoteAction.VOTE_NONE">
            <summary>
            No vote.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.VoteAction.VOTE_END">
            <summary>
            End race.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.VoteAction.VOTE_RESTART">
            <summary>
            Restart session.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.VoteAction.VOTE_QUALIFY">
            <summary>
            Qualify.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ViewIndentifier">
            <summary>
            Represents the camera view identifiers.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_FOLLOW">
            <summary>
            Arcade.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_HELI">
            <summary>
            Helicopter.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_CAM">
            <summary>
            TV camera.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_DRIVER">
            <summary>
            Driver.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_CUSTOM">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ViewIndentifier.VIEW_MAX">
            <summary>
            Max
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PlayerFlags">
            <summary>
            Represents the player flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_SWAPSIDE">
            <summary>
            Left-hand drive.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_AUTOGEARS">
            <summary>
            Auto gears enabled.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_SHIFTER">
            <summary>
            H-Shifter.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_HELP_B">
            <summary>
            Brake help.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_AXIS_CLUTCH">
            <summary>
            Axis clutch pedal.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_INPITS">
            <summary>
            In pits.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_AUTOCLUTCH">
            <summary>
            Auto-clutch.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_MOUSE">
            <summary>
            Mouse steering.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_KB_NO_HELP">
            <summary>
            Keyboard no help.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_KB_STABILISED">
            <summary>
            Keyboard stabilized.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PlayerFlags.PIF_CUSTOM_VIEW">
            <summary>
            Custom view.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_REO">
            <summary>
            Reorder packet.
            </summary>
            <remarks>
            Sent when race starts or is restarted. Used to reorder grid.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_REO.#ctor">
            <summary>
            Creates a new reorder packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_REO.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new reorder packet.
            </summary>
            <param name="plid">A collection of PLID bytes.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_REO.#ctor(System.Byte[])">
            <summary>
            Creates a new reorder packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_REO.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_REO.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_REO.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_REO.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_REO.NumP">
            <summary>
            Gets the number of players in the race. This gets filled in automatically 
            when the packet is sent.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_REO.PLID">
            <summary>
            Gets a collection player IDs in order, used to set the grid.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_FIN">
            <summary>
            Finished race notification packet.
            </summary>
            <remarks>
            Sent when player crosses the finish line but before final result has been 
            confirmed. For the final result use the <see cref="T:InSimDotNet.Packets.IS_RES"/> result packet.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_FIN.#ctor">
            <summary>
            Creates a new finished race notification packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_FIN.#ctor(System.Byte[])">
            <summary>
            Creates a new finished race notification packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.TTime">
            <summary>
            Gets the total race time of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.BTime">
            <summary>
            Gets the best lap time of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.NumStops">
            <summary>
            Gets the number of pit stops completed by the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.Confirm">
            <summary>
            Gets the players confirmation flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.LapsDone">
            <summary>
            Gets the number of laps completed by the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_FIN.Flags">
            <summary>
            Gets the player flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_ERR">
            <summary>
            InSim Relay error packet.
            </summary>
            <remarks>
             Sent when an error occurs.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_ERR.#ctor(System.Byte[])">
            <summary>
            Creates a new InSim Relay error packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ERR.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ERR.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ERR.ReqI">
            <summary>
            Gets the request ID, as given in <see cref="T:InSimDotNet.Packets.IR_SEL"/>.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ERR.ErrNo">
            <summary>
            Gets the error information.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutGauge">
            <summary>
            Class to manage a OutGauge connection with LFS.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutClient">
            <summary>
            Abstract class for managing OutSim and OutGauge UDP connections with LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutClient"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutClient"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period in milliseconds.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutClient"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period for the socket.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.Connect(System.String,System.Int32)">
            <summary>
            Starts listening for packets from LFS.
            </summary>
            <param name="host">The host to listen to.</param>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.Disconnect">
            <summary>
            Disconnects from LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.Dispose">
            <summary>
            Disposes the connection.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.Dispose(System.Boolean)">
            <summary>
            Disposes the connection.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.HandlePacket(System.Byte[])">
            <summary>
            Called when packet data is received. Override to implement handling for specific packets.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.OnTimedOut(System.EventArgs)">
            <summary>
            Raises the TimedOut event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object containing the event data.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutClient.OnOutError(InSimDotNet.Out.OutErrorEventArgs)">
            <summary>
            Raises the OutError event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.Out.OutErrorEventArgs"/> object containing the event data.</param>
        </member>
        <member name="E:InSimDotNet.Out.OutClient.TimedOut">
            <summary>
            Occurs when the connection times out.
            </summary>
        </member>
        <member name="E:InSimDotNet.Out.OutClient.OutError">
            <summary>
            Occurs when an error occurs on the internal receive thread.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutClient.IsConnected">
            <summary>
            Gets if the socket is connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutClient.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutClient.Timeout">
            <summary>
            Gets the amount of time to wait before timing out.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutGauge.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutGauge"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutGauge.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutGauge"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period in milliseconds.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutGauge.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutGauge"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period</param>
        </member>
        <member name="M:InSimDotNet.Out.OutGauge.HandlePacket(System.Byte[])">
            <summary>
            Called when packet data is received. Override to implement handling for specific packets.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutGauge.OnPacketReceived(InSimDotNet.Out.OutGaugeEventArgs)">
            <summary>
            Raises the PacketReceived event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.Out.OutGaugeEventArgs"/> object containing the event data.</param>
        </member>
        <member name="E:InSimDotNet.Out.OutGauge.PacketReceived">
            <summary>
            Occurs when a OutGauge packet is received.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ScreenshotError">
            <summary>
            Represents the screenshot options.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ScreenshotError.SSH_OK">
            <summary>
            OK - completed instruction.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ScreenshotError.SSH_DEDICATED">
            <summary>
            Can't save a screenshot - dedicated host.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ScreenshotError.SSH_CORRUPTED">
            <summary>
            <see cref="T:InSimDotNet.Packets.IS_SSH"/> corrupted (e.g. BMP does not end with zero).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ScreenshotError.SSH_NO_SAVE">
            <summary>
            Could not save the screenshot.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ReplayError">
            <summary>
            Represents the replay errors.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_OK">
            <summary>
            OK - completed instruction.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_ALREADY">
            <summary>
            OK - already at the destination.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_DEDICATED">
            <summary>
            Can't run a replay - dedicated host.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_WRONG_MODE">
            <summary>
            Can't start a replay - not in a suitable mode.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_NOT_REPLAY">
            <summary>
            RName is zero but no replay is currently loaded.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_CORRUPTED">
            <summary>
            IS_RIP corrupted (e.g. RName does not end with zero).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_NOT_FOUND">
            <summary>
            The replay file was not found.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_UNLOADABLE">
            <summary>
            Obsolete / future / corrupted.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_DEST_OOB">
            <summary>
            Destination is beyond replay length.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_UNKNOWN">
            <summary>
            Unknown error found starting replay.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_USER">
            <summary>
            Replay search was terminated by user.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayError.RIP_OOS">
            <summary>
            Can't reach destination - SPR is out of sync.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SPX">
            <summary>
            Split time packet.
            </summary>
            <remarks>
            Sent when a player completes a split.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SPX.#ctor">
            <summary>
            Creates a new split time packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SPX.#ctor(System.Byte[])">
            <summary>
            Creates a new split time packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.STime">
            <summary>
            Gets the split time.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.ETime">
            <summary>
            Gets the total elapsed time.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.Split">
            <summary>
            Gets the split number.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.Penalty">
            <summary>
            Gets the currently penalty value of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SPX.NumStops">
            <summary>
            Gets the number of pit stops the player has completed.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PIT">
            <summary>
            Pit stop packet.
            </summary>
            <remarks>
            Sent when player completes a pit stop.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PIT.#ctor">
            <summary>
            Creates a new pit stop packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PIT.#ctor(System.Byte[])">
            <summary>
            Creates a new pit stop packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.LapsDone">
            <summary>
            Gets the laps completed by the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Flags">
            <summary>
            Gets the player flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Penalty">
            <summary>
            Gets the players current penalty value.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.NumStops">
            <summary>
            Gets the number of pit stops completed by the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Tyres">
            <summary>
            Gets the tyres changed during the pit stop.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PIT.Work">
            <summary>
            Gets the work completed during the pit stop.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_NPL">
            <summary>
            New player packet.
            </summary>
            <remarks>
            Sent when a player joins the race (or leaving pits if PLID already exists).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NPL.#ctor">
            <summary>
            Creates a new new player packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NPL.#ctor(System.Byte[])">
            <summary>
            Creates a new new player packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.UCID">
            <summary>
            Gets the unique ID of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.PType">
            <summary>
            Gets the player type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Flags">
            <summary>
            Gets the player flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.PName">
            <summary>
            Gets the name of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Plate">
            <summary>
            Gets the number plate of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.CName">
            <summary>
            Gets the car name of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.SName">
            <summary>
            Gets the skin name of the players car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Tyres">
            <summary>
            Gets the tyre compounds on the players car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.H_Mass">
            <summary>
            Gets the added mass of the car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.H_TRes">
            <summary>
            Gets the intake restriction of the car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Model">
            <summary>
            Gets the driver model.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.Pass">
            <summary>
            Gets the passenger flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.SetF">
            <summary>
            Gets the setup flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NPL.NumP">
            <summary>
            Gets the number of player in the race.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_LAP">
            <summary>
            Lap time packet.
            </summary>
            <remarks>
            Sent when a player completes a lap.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_LAP.#ctor">
            <summary>
            Creates a new lap time packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_LAP.#ctor(System.Byte[])">
            <summary>
            Creates a new lap time packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.PLID">
            <summary>
            Gets the unique ID of the player who completed the lap.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.LTime">
            <summary>
            Gets the lap time of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.ETime">
            <summary>
            Gets the total elapsed race time of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.LapsDone">
            <summary>
            Gets the number of laps this player has done.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.Flags">
            <summary>
            Gets the flags for this player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.Penalty">
            <summary>
            Gets the current penalty of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_LAP.NumStops">
            <summary>
            Gets the number of pit stops completed by the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_BFN">
            <summary>
            Button function packet.
            </summary>
            <remarks>
            Used to delete InSim buttons.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BFN.#ctor">
            <summary>
            Creates a new button function packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BFN.#ctor(System.Byte[])">
            <summary>
            Creates a new button function packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_BFN.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.Size">
            <summary>
            Gets the packet size.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.Type">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.SubT">
            <summary>
            Gets or sets the sub-type of the <see cref="T:InSimDotNet.Packets.IS_BFN"/> packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.UCID">
            <summary>
            Gets or sets the connection to send to or from (0 = local / 255 = all).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.ClickID">
            <summary>
            Gets or sets the ID of the button to delete (if SubT is BFN_DEL_BTN)
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_BFN.Inst">
            <summary>
            Used internally by InSim.
            </summary>
        </member>
        <member name="T:InSimDotNet.InSim">
            <summary>
            Class to manage connecting to LFS using the InSim protocol.
            </summary>
        </member>
        <member name="F:InSimDotNet.InSim.InSimVersion">
            <summary>
            Gets the current InSim version. This is a constant field.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSim.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSim"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSim.Dispose">
            <summary>
            Releases all resources used by the connection.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSim.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the connection.
            </summary>
            <param name="disposing">Set true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Initialize(InSimDotNet.InSimSettings)">
            <summary>
            Initializes the connection with LFS.
            </summary>
            <param name="settings">A <see cref="T:InSimDotNet.InSimSettings"/> object containing information to initialize the connection with.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Disconnect">
            <summary>
            Disconnects from LFS and releases all resources associated with the connection.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSim.Send(InSimDotNet.Packets.ISendable)">
            <summary>
            Sends the specified packet to LFS.
            </summary>
            <param name="packet">The<see cref="T:InSimDotNet.Packets.ISendable"/> packet to send.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(System.Collections.Generic.IEnumerable{InSimDotNet.Packets.ISendable})">
            <summary>
            Sends the specified sequence of packets to LFS.
            </summary>
            <param name="packets">The sequence of <see cref="T:InSimDotNet.Packets.ISendable"/> packets to send.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(System.String,System.Object[])">
            <summary>
            Sends a message to LFS.
            </summary>
            <param name="message">The message to send.</param>
            <param name="args">An object array containing zero or more objects to format the message with.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(System.Byte,System.String,System.Object[])">
            <summary>
            Sends a message to a specific connection.
            </summary>
            <param name="ucid">The ID of the connection to send the message to.</param>
            <param name="message">The message to send.</param>
            <param name="args">An object array containing zero or more objects to format the message with.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Sends a message to a specific connection, of if the ucid is 0 to a specific player.
            </summary>
            <param name="ucid">The ID of the connection to send the message to.</param>
            <param name="plid">The ID of the player to send the message to.</param>
            <param name="message">The message to send.</param>
            <param name="args">An object array containing zero or more objects to format the message with.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(InSimDotNet.Packets.TinyType)">
            <summary>
            Sends a <see cref="T:InSimDotNet.Packets.IS_TINY"/> packet to LFS.
            </summary>
            <param name="tinyType">The type of <see cref="T:InSimDotNet.Packets.IS_TINY"/> to send.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(InSimDotNet.Packets.TinyType,System.Byte)">
            <summary>
            Sends a <see cref="T:InSimDotNet.Packets.IS_TINY"/> packet to LFS.
            </summary>
            <param name="tinyType">The type of <see cref="T:InSimDotNet.Packets.IS_TINY"/> to send.</param>
            <param name="reqi">The <see cref="T:InSimDotNet.Packets.IS_TINY"/> request ID</param> 
        </member>
        <member name="M:InSimDotNet.InSim.Send(InSimDotNet.Packets.SmallType,System.Int64)">
            <summary>
            Sends a <see cref="T:InSimDotNet.Packets.IS_SMALL"/> packet to LFS.
            </summary>
            <param name="smallType">The type of <see cref="T:InSimDotNet.Packets.IS_SMALL"/> to send.</param>
            <param name="value">The value to send.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Send(InSimDotNet.Packets.SmallType,System.Int64,System.Byte)">
            <summary>
            Sends a <see cref="T:InSimDotNet.Packets.IS_SMALL"/> packet to LFS.
            </summary>
            <param name="smallType">The type of <see cref="T:InSimDotNet.Packets.IS_SMALL"/> to send.</param>
            <param name="value">The value to send.</param>
            <param name="reqi">The <see cref="T:InSimDotNet.Packets.IS_SMALL"/> request ID</param>
        </member>
        <member name="M:InSimDotNet.InSim.Bind``1(InSimDotNet.PacketHandler{``0})">
            <summary>
            Binds a packet callback delegate with this InSim connection.
            </summary>
            <typeparam name="TPacket">The type of <see cref="T:InSimDotNet.Packets.IPacket"/> to bind.</typeparam>
            <param name="callback">The method to invoke when the packet is received.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Bind(InSimDotNet.Packets.PacketType,InSimDotNet.PacketHandler)">
            <summary>
            Binds a packet callback delegate with this InSim connection.
            </summary>
            <param name="packetType">The type of the packet to bind.</param>
            <param name="callback">The method to invoke when the packet is received.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Unbind``1(InSimDotNet.PacketHandler{``0})">
            <summary>
            Unbinds a packet callback delegate from this InSim connection.
            </summary>
            <typeparam name="TPacket">The type of <see cref="T:InSimDotNet.Packets.IPacket"/> to unbind.</typeparam>
            <param name="callback">The method to unbind.</param>
        </member>
        <member name="M:InSimDotNet.InSim.Unbind(InSimDotNet.Packets.PacketType,InSimDotNet.PacketHandler)">
            <summary>
            Unbinds a packet callback delegate from this InSim connection.
            </summary>
            <param name="packetType">The type of packet to unbind</param>
            <param name="callback">The method to unbind.</param>
        </member>
        <member name="M:InSimDotNet.InSim.IsBound``1(InSimDotNet.PacketHandler{``0})">
            <summary>
            Returns if a packet callback delegate has been bound to this InSim connection.
            </summary>
            <typeparam name="TPacket">The type of <see cref="T:InSimDotNet.Packets.IPacket"/> to check.</typeparam>
            <param name="callback">The method to check.</param>
            <returns>True if the method has been bound.</returns>
        </member>
        <member name="M:InSimDotNet.InSim.IsBound(InSimDotNet.Packets.PacketType,InSimDotNet.PacketHandler)">
            <summary>
            Returns if a packet callback delegate has been bound to this InSim connection.
            </summary>
            <param name="packetType">The type of packet to check.</param>
            <param name="callback">The method to check.</param>
            <returns>True if the method has been bound.</returns>
        </member>
        <member name="M:InSimDotNet.InSim.OnInitializing(InSimDotNet.InitializeEventArgs)">
            <summary>
            Raises the Initializing event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.InitializeEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.InSim.OnInitialized(InSimDotNet.InitializeEventArgs)">
            <summary>
            Raises the Initialized event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.InitializeEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.InSim.OnDisconnected(InSimDotNet.DisconnectedEventArgs)">
            <summary>
            Raises the Disconnected event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.DisconnectedEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.InSim.OnInSimError(InSimDotNet.InSimErrorEventArgs)">
            <summary>
            Raises the InSimError event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.InSimErrorEventArgs"/> object containing the event data</param>
        </member>
        <member name="M:InSimDotNet.InSim.OnPacketReceived(InSimDotNet.PacketEventArgs)">
            <summary>
            Raises the PacketReceived event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.PacketEventArgs"/> object containing the event data</param>
        </member>
        <member name="E:InSimDotNet.InSim.Initializing">
            <summary>
            Occurs when InSim is initializing.
            </summary>
        </member>
        <member name="E:InSimDotNet.InSim.Initialized">
            <summary>
            Occurs when InSim is initialized.
            </summary>
        </member>
        <member name="E:InSimDotNet.InSim.Disconnected">
            <summary>
            Occurs when InSim is disconnected.
            </summary>
        </member>
        <member name="E:InSimDotNet.InSim.InSimError">
            <summary>
            Occurs when an exception is thrown on the internal receive thread.
            </summary>
        </member>
        <member name="E:InSimDotNet.InSim.PacketReceived">
            <summary>
            Occurs when a packet is received.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.IsConnected">
            <summary>
            Gets if LFS is connected.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.Settings">
            <summary>
            Gets a read-only version of the <see cref="T:InSimDotNet.InSimSettings"/> used to initialize the 
            connection with LFS.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.Socket">
            <summary>
            Gets the underlying <see cref="T:InSimDotNet.ISocket"/>.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.UdpSocket">
            <summary>
            Gets the underlying <see cref="T:InSimDotNet.ISocket"/> used for UDP updates.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.PacketFactory">
            <summary>
            Gets or sets the <see cref="P:InSimDotNet.InSim.PacketFactory"/> used to build packets.
            </summary>
        </member>
        <member name="P:InSimDotNet.InSim.BuildAllPackets">
            <summery>
            Gets or sets whether all packets should be built.
            </summery>
        </member>
        <member name="T:InSimDotNet.Packets.HlvcFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_HLV"/> packets's HLVC property.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HlvcFlags.Ground">
            <summary>
            Car has hit the groud.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HlvcFlags.Wall">
            <summary>
            Car has hit a wall.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HlvcFlags.Speeding">
            <summary>
            Car was speeding in pits.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutSim">
            <summary>
            Class to manage a OutSim connection with LFS.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutSim.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutClient"/> class.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutSim.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutSim"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period in milliseconds.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutSim.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutSim"/> class with the specified timeout.
            </summary>
            <param name="timeout">The timeout period</param>
        </member>
        <member name="M:InSimDotNet.Out.OutSim.HandlePacket(System.Byte[])">
            <summary>
            Called when packet data is received. Override to implement handling for specific packets.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="M:InSimDotNet.Out.OutSim.OnPacketReceived(InSimDotNet.Out.OutSimEventArgs)">
            <summary>
            Raises the PacketReceived event.
            </summary>
            <param name="e">The <see cref="T:InSimDotNet.Out.OutSimEventArgs"/> object containing the event data.</param>
        </member>
        <member name="E:InSimDotNet.Out.OutSim.PacketReceived">
            <summary>
            Occurs when a OutSim packet is received.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.MessageSound">
            <summary>
            Represents the message sound.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.MessageSound.SND_SILENT">
            <summary>
            Silent.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.MessageSound.SND_MESSAGE">
            <summary>
            Message.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.MessageSound.SND_SYSMESSAGE">
            <summary>
            System-message.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.MessageSound.SND_INVALIDKEY">
            <summary>
            Invalid key.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.MessageSound.SND_ERROR">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MSO">
            <summary>
            Message out packet.
            </summary>
            <remarks>
            Sent by LFS containing system and user messages.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSO.#ctor">
            <summary>
            Creates a new message out packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSO.#ctor(System.Byte[])">
            <summary>
            Creates a new message out packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.UCID">
            <summary>
            Gets the unique ID of the connection who sent the message (0 if host).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.PLID">
            <summary>
            Gets the unique ID of the player who sent the message (if 0 use UCID).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.UserType">
            <summary>
            Gets the source that the message was sent from.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.TextStart">
            <summary>
            Gets the first character of the message text after the player name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSO.Msg">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_III">
            <summary>
            InSim info packet.
            </summary>
            <remarks>
            Sent when a player sends a /i message to a host.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_III.#ctor">
            <summary>
            Creates a new InSim info packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_III.#ctor(System.Byte[])">
            <summary>
            Creates a new InSim info packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.UCID">
            <summary>
            Gets the unique ID of the connection who sent the message.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.PLID">
            <summary>
            Gets the unique ID of the player who sent the message (if 0 use UCID).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_III.Msg">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_AXO">
            <summary>
            AutoX object packet
            </summary>
            <remarks>
            Sent if an autocross object is hit.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXO.#ctor">
            <summary>
            Creates a new AutoX object packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXO.#ctor(System.Byte[])">
            <summary>
            Creates a new AutoX object packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXO.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXO.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXO.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXO.PLID">
            <summary>
            Gets the unique ID of the player who hit the object.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.DashLightFlags">
            <summary>
            OutGauge packet ShowLights and DashLight flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_SHIFT">
            <summary>
            Shift light on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_FULLBEAM">
            <summary>
            Headlights on full beam.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_HANDBRAKE">
            <summary>
            Handbrake on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_PITSPEED">
            <summary>
            Pit lane speed limiter on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_TC">
            <summary>
            Traction-control on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_SIGNAL_L">
            <summary>
            Left turn signal on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_SIGNAL_R">
            <summary>
            Right turn signal on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_SIGNAL_ANY">
            <summary>
            Shared turn signal on (hazard lights).
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_OILWARN">
            <summary>
            Oil pressure warning on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_BATTERY">
            <summary>
            Battery warning light on.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.DashLightFlags.DL_ABS">
            <summary>
            Anti-lock brakes active.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.TyreCompound">
            <summary>
            Represents the tyre compounds.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_R1">
            <summary>
            Race 1.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_R2">
            <summary>
            Race 2.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_R3">
            <summary>
            Race 3.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_R4">
            <summary>
            Race 4.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_ROAD_SUPER">
            <summary>
            Road super.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_ROAD_NORMAL">
            <summary>
            Road normal.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_HYBRID">
            <summary>
            Hybrid.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.TyreCompound.TYRE_KNOBBLY">
            <summary>
            Knobbly.
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketFactory">
            <summary>
            Provides support for creating InSim packets.
            </summary>
        </member>
        <member name="M:InSimDotNet.PacketFactory.GetPacketType(System.Byte[])">
            <summary>
            Determines the <see cref="T:InSimDotNet.Packets.PacketType"/> of the first packet in a buffer.
            </summary>
            <param name="buffer">A buffer containing packet data.</param>
            <returns>The packet type.</returns>
        </member>
        <member name="M:InSimDotNet.PacketFactory.BuildPacket(System.Byte[])">
            <summary>
            Builds a new instance of <see cref="T:InSimDotNet.Packets.IPacket"/> from the specified buffer.
            </summary>
            <param name="buffer">The buffer containing the packet data.</param>
            <returns>An instance of <see cref="T:InSimDotNet.Packets.IPacket"/>.</returns>
        </member>
        <member name="M:InSimDotNet.PacketFactory.PacketLookup(System.Type)">
            <summary>
            Looks up <see cref="T:InSimDotNet.Packets.PacketType"/> information for the specified type.
            </summary>
            <param name="type">The type to lookup</param>
            <returns>The <see cref="T:InSimDotNet.Packets.PacketType"/>.</returns>
        </member>
        <member name="T:InSimDotNet.Packets.IS_TOC">
            <summary>
            Take over car packet.
            </summary>
            <remarks>
            Sent when a player takes over another players car.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_TOC.#ctor">
            <summary>
            Creates a new take over car packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_TOC.#ctor(System.Byte[])">
            <summary>
            Creates a new take over car packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.OldUCID">
            <summary>
            Gets the old connection ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_TOC.NewUCID">
            <summary>
            Gets new connection ID of the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SSH">
            <summary>
            Screenshot packet.
            </summary>
            <remarks>
            Used to take a screenshot in LFS.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SSH.#ctor">
            <summary>
            Creates a new screenshot packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SSH.#ctor(System.Byte[])">
            <summary>
            Creates a new screenshot packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SSH.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SSH.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SSH.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SSH.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SSH.Error">
            <summary>
            Gets the screenshot error.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SSH.BMP">
            <summary>
            Gets or sets the bitmap name.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_RIP">
            <summary>
            Replay information packet.
            </summary>
            <remarks>
            Used to control replay playback (when request completed one of these is sent in conformation).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RIP.#ctor">
            <summary>
            Creates a new replay information packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RIP.#ctor(System.Byte[])">
            <summary>
            Creates a new replay information packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_RIP.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.Error">
            <summary>
            Gets the error associated with the replay.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.MPR">
            <summary>
            Gets or sets if the replay is single player or multiplayer.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.Paused">
            <summary>
            Gets or sets if the replay is paused (request: pause on arrival / reply: paused state).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.Options">
            <summary>
            Gets or sets the replay options.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.CTime">
            <summary>
            Gets or sets the current time in the replay (request: destination / reply: position).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.TTime">
            <summary>
            Gets or sets the total time of the replay
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_RIP.RName">
            <summary>
            Gets or sets the replay name.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PEN">
            <summary>
            Penalty packet.
            </summary>
            <remarks>
            Sent when penalty given or cleared.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PEN.#ctor">
            <summary>
            Creates a new penalty packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PEN.#ctor(System.Byte[])">
            <summary>
            Creates a new penalty packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.OldPen">
            <summary>
            Gets the old penalty value.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.NewPen">
            <summary>
            Gets the new penalty value.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PEN.Reason">
            <summary>
            Gets the reason for the penalty.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_NCN">
            <summary>
            New connection packet.
            </summary>
            <remarks>
            Sent when a connection joins a host.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NCN.#ctor">
            <summary>
            Creates a new new connection packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_NCN.#ctor(System.Byte[])">
            <summary>
            Creates a new new connection packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.UCID">
            <summary>
            Gets the unique ID of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.UName">
            <summary>
            Gets the LFS username of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.PName">
            <summary>
            Gets the current player name of the connection.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.Admin">
            <summary>
            Gets if the connection if an admin.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.Total">
            <summary>
            Gets the total number of connections on the host.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_NCN.Remote">
            <summary>
            Gets if the connection is remote or local.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CCH">
            <summary>
            Camera change packet.
            </summary>
            <remarks>
            Sent when a user changes camera.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CCH.#ctor">
            <summary>
            Creates a new camera change packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CCH.#ctor(System.Byte[])">
            <summary>
            Creates a new camera change packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CCH.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CCH.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CCH.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CCH.PLID">
            <summary>
            Gets the unique ID of the player who changed cameras.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CCH.Camera">
            <summary>
            Gets the view identifier of the current player.
            </summary>
        </member>
        <member name="T:InSimDotNet.PacketEventArgs">
            <summary>
            Provides data for the <see cref="T:InSimDotNet.InSim"/> PacketReceived event.
            </summary>
        </member>
        <member name="M:InSimDotNet.PacketEventArgs.#ctor(InSimDotNet.Packets.IPacket)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.PacketEventArgs"/> class.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:InSimDotNet.PacketEventArgs.Cast``1">
            <summary>
            Casts the <see cref="T:InSimDotNet.Packets.IPacket"/> to the specified type.
            </summary>
            <typeparam name="T">The type of <see cref="T:InSimDotNet.Packets.IPacket"/> to cast the packet to.</typeparam>
            <returns>The result of the specified packet cast.</returns>
        </member>
        <member name="P:InSimDotNet.PacketEventArgs.Packet">
            <summary>
            Gets the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.PacketEventArgs.IsHandled">
            <summary>
            Gets or sets if the <see cref="T:InSimDotNet.Packets.IPacket"/> has been handled. If set to true no packet bindings will be raised.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ClickFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_BTC"/> CFlags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ClickFlags.ISB_LMB">
            <summary>
            Left mouse button.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ClickFlags.ISB_RMB">
            <summary>
            Right mouse button.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ClickFlags.ISB_CTRL">
            <summary>
            Ctrl + click.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ClickFlags.ISB_SHIFT">
            <summary>
            Shift + click.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.FlagType">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_FLG"/> Flag.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.FlagType.None">
            <summary>
            No flag shown.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.FlagType.Blue">
            <summary>
            Blue flag (car being lapped).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.FlagType.Yellow">
            <summary>
            Yellow flag (car is slow or stopped in dangerous place).
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ContactFlags">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.CarContact"/> Info.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ContactFlags.CCI_BLUE">
            <summary>
            This car is in the way of a driver who is a lap ahead
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ContactFlags.CCI_YELLOW">
            <summary>
            This car is slow or stopped and in a dangerous place
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ContactFlags.CCI_LAG">
            <summary>
            This car is lagging (missing or delayed position packets)
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.SetupFlags">
            <summary>
            Represents the car setup flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SetupFlags.SETF_SYMM_WHEELS">
            <summary>
            Symmetrical wheels.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SetupFlags.SETF_TC_ENABLE">
            <summary>
            Traction control enabled.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SetupFlags.SETF_ABS_ENABLE">
            <summary>
            Anti-lock brakes enabled.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.RelayError">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IR_ERR"/> ErrNo.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_PACKET">
            <summary>
            Invalid packet sent by client (wrong structure / length).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_PACKET2">
            <summary>
            Invalid packet sent by client (packet was not allowed to be forwarded to host).
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_HOSTNAME">
            <summary>
            Wrong hostname given by client.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_ADMIN">
            <summary>
            Wrong admin pass given by client.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_SPEC">
            <summary>
            Wrong spec pass given by client.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.RelayError.IR_ERR_NOSPEC">
            <summary>
            Spectator pass required, but none given.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PassengerFlags">
            <summary>
            Passenger flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.FRONT_FEMALE">
            <summary>
            Front passenger is female.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.FRONT_OCCUPIED">
            <summary>
            Passenger in front.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_LEFT_FEMALE">
            <summary>
            Rear-left passenger is female.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_LEFT_OCCUPIED">
            <summary>
            Passenger in rear-left.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_MIDDLE_FEMALE">
            <summary>
            Rear-middle passenger is female.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_MIDDLE_OCCUPIED">
            <summary>
            Passenger in rear-middle.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_RIGHT_FEMALE">
            <summary>
            Rear-right passenger is female.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PassengerFlags.REAR_RIGHT_OCCUPIED">
            <summary>
            Passenger in rear-right.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PacketType">
            <summary>
            Represents the packet type.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_NONE">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_ISI">
            <summary>
            InSim Initialise
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_VER">
            <summary>
            Version Info
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_TINY">
            <summary>
            Multi-purpose
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SMALL">
            <summary>
            Multi purpose
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_STA">
            <summary>
            State info
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SCH">
            <summary>
            Single character
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SFP">
            <summary>
            State flags pack
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SCC">
            <summary>
            Set car camera
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CPP">
            <summary>
            Cam pos pack
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_ISM">
            <summary>
            Start multiplayer
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MSO">
            <summary>
            Message out
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_III">
            <summary>
            Hidden /i message
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MST">
            <summary>
            Type message or /command
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MTC">
            <summary>
            Message to a connection
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MOD">
            <summary>
            Set screen mode
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_VTN">
            <summary>
            Vote notification
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_RST">
            <summary>
            Race start
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_NCN">
            <summary>
            New connection
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CNL">
            <summary>
            Connection left
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CPR">
            <summary>
            Connection renamed
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_NPL">
            <summary>
            New player (joined race)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PLP">
            <summary>
            Player pit (keeps slot in race)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PLL">
            <summary>
            Player leave (spectate - loses slot)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_LAP">
            <summary>
            Lap time
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SPX">
            <summary>
            Split x time
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PIT">
            <summary>
            Pit stop start
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PSF">
            <summary>
            Pit stop finish
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PLA">
            <summary>
            Pit lane enter / leave
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CCH">
            <summary>
            Camera changed
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PEN">
            <summary>
            Penalty given or cleared
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_TOC">
            <summary>
            Take over car
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_FLG">
            <summary>
            Flag (yellow or blue)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PFL">
            <summary>
            Player flags (help flags)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_FIN">
            <summary>
            Finished race
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_RES">
            <summary>
            Result confirmed
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_REO">
            <summary>
            Reorder (info or instruction)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_NLP">
            <summary>
            Node and lap packet
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MCI">
            <summary>
            Multi car info
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MSX">
            <summary>
            Message type extended
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_MSL">
            <summary>
            Message to local computer
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CRS">
            <summary>
            Car reset
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_BFN">
            <summary>
            Delete buttons / receive button requests
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_AXI">
            <summary>
            Autocross layout information
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_AXO">
            <summary>
            Hit an autocross object
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_BTN">
            <summary>
            Send button
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_BTC">
            <summary>
            Button Click
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_BTT">
            <summary>
            Button type
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_RIP">
            <summary>
            Replay information packet
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_SSH">
            <summary>
            Screenshot
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_CON">
            <summary>
            Contact (collision report)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_OBH">
            <summary>
            contact car + object (collision report)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_HLV">
            <summary>
            report incidents that would violate HLVC
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_PLC">
            <summary>
            player cars
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_AXM">
            <summary>
            autocross multiple objects
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.ISP_ACR">
            <summary>
            admin command report
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_ARQ">
            <summary>
            Admin request
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_ARP">
            <summary>
            Admin response
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_HLR">
            <summary>
            Host list request
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_HOS">
            <summary>
            Host
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_SEL">
            <summary>
            Select host
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PacketType.IRP_ERR">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_SCH">
            <summary>
            Single character packet.
            </summary>
            <remarks>
            Used to send a single character to LFS.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SCH.#ctor">
            <summary>
            Creates a new single character packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_SCH.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>Returns the packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCH.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCH.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCH.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCH.CharB">
            <summary>
            Gets or sets the key to press.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_SCH.Flags">
            <summary>
            Gets or sets the character modifier flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Vector">
            <summary>
            Represents a vector in three-dimensional space.
            </summary>
        </member>
        <member name="M:InSimDotNet.Vector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vector type.
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The Z coordinate</param>
        </member>
        <member name="M:InSimDotNet.Vector.Equals(InSimDotNet.Vector)">
            <summary>
            Returns if two vectors are equal.
            </summary>
            <param name="other">The vector to check for equality.</param>
            <returns>True if the vectors are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vector.Equals(System.Object)">
            <summary>
            Returns if two objects equal.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vector.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InSimDotNet.Vector.op_Equality(InSimDotNet.Vector,InSimDotNet.Vector)">
            <summary>
            Returns if two vectors are equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True of the vectors are equal.</returns>
        </member>
        <member name="M:InSimDotNet.Vector.op_Inequality(InSimDotNet.Vector,InSimDotNet.Vector)">
            <summary>
            Returns if two vectors are not-equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True of the vectors are not-equal.</returns>
        </member>
        <member name="P:InSimDotNet.Vector.X">
            <summary>
            Gets the X coordinate.
            </summary>
        </member>
        <member name="P:InSimDotNet.Vector.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
        </member>
        <member name="P:InSimDotNet.Vector.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PLC">
            <summary>
            PLayer Cars.
            </summary>
            <remarks>
            You can send a packet to limit the cars that can be used by a given connection. 
            The resulting set of selectable cars is a subset of the cars set to be available 
            on the host (by the /cars command).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLC.#ctor">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_PLC"/> packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLC.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>An array contaning the packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLC.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLC.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLC.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLC.UCID">
            <summary>
            Gets or sets the unique ID of the connection on which to limit the cars.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLC.Cars">
            <summary>
            Gets or sets the cars to limit.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_AXM">
            <summary>
            AutoX Multiple objects - variable size.
            </summary>
            <remarks>
            Set the ISF_AXM_LOAD flag in the IS_ISI for info about objects when a layout is loaded.
            Set the ISF_AXM_EDIT flag in the IS_ISI for info about objects edited by user or InSim.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXM.#ctor">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_AXM"/> object.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXM.#ctor(System.Collections.Generic.IEnumerable{InSimDotNet.Packets.ObjectInfo})">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_AXM"/> object.
            </summary>
            <param name="info">A collection of <see cref="T:InSimDotNet.Packets.ObjectInfo"/> sub-packets.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXM.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_AXM"/> object.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="M:InSimDotNet.Packets.IS_AXM.GetBuffer">
            <summary>
            Gets the packet data.
            </summary>
            <returns>An array containing the packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.ReqI">
            <summary>
            Gets or sets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.NumO">
            <summary>
            Gets the number of objects in the packet. This value is filled in automatically when sending objects.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.UCID">
            <summary>
            Gets or sets the unique ID of the connection that sent the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.PMOAction">
            <summary>
            Gets the object action flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.PMOFlags">
            <summary>
            Gets the flags (only bit 0 is currently used). If PMOFlags bit 0 is set in a PMO_LOADING_FILE packet, LFS has 
            reached the end of a layout file which it is loading. PMOFlags bit 0 can also be set in an IS_AXM with PMOAction
            of PMO_ADD_OBJECTS. This causes all objects to be optimised.  It is important not to set bit 0 in every packet 
            you send to add objects or you will cause severe glitches on the clients computers. See InSim.txt for details.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_AXM.Info">
            <summary>
            Gets a collection of <see cref="T:InSimDotNet.Packets.ObjectInfo"/> sub-packets.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.CarContact">
            <summary>
            Class to represent the <see cref="T:InSimDotNet.Packets.IS_CON"/> sub-packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.CarContact.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Packets.CarContact"/> class.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> containing the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.PLID">
            <summary>
            Gets the unique player ID of the car.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Info">
            <summary>
            Gets the car info flags.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Steer">
            <summary>
            Gets the front-wheel steer in degrees (right positive).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.ThrBrk">
            <summary>
            Gets the combined throttle and brake (high 4 bits : throttle / low 4 bits : brake (0 to 15)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.CluHan">
            <summary>
            Gets the combined clutch and handbrake (high 4 bits : clutch / low 4 bits : handbrake (0 to 15)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.GearSp">
            <summary>
            Gets the current gear (high 4 bits : gear (15=R) / low 4 bits : spare).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Speed">
            <summary>
            Gets the speed in meters/per second.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Direction">
            <summary>
            Gets the direction of the car motion (if Speed > 0 : 0 = world y direction, 128 = 180 deg).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Heading">
            <summary>
            Gets the direction of forward axis (direction of forward axis : 0 = world y direction, 128 = 180 deg).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.AccelF">
            <summary>
            Gets the forward acceleration of the car (m/s^2 longitudinal acceleration (forward positive)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.AccelR">
            <summary>
            Gets the lateral acceleration of the car (m/s^2 lateral acceleration (right positive)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.X">
            <summary>
            Gets the X coordinate of the car (1 meter = 16).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.CarContact.Y">
            <summary>
            Gets the Y coordinate of the car (1 metre = 16).
            </summary>
        </member>
        <member name="T:InSimDotNet.InitializeEventArgs">
            <summary>
            Provides data for the <see cref="T:InSimDotNet.InSim"/> initialized event.
            </summary>
        </member>
        <member name="M:InSimDotNet.InitializeEventArgs.#ctor(InSimDotNet.ReadOnlyInSimSettings)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InitializeEventArgs"/> object.
            </summary>
            <param name="settings">The InSim settings used to initialize the connection with LFS.</param>
        </member>
        <member name="P:InSimDotNet.InitializeEventArgs.Settings">
            <summary>
            Gets the settings used to initialize the connection with LFS.
            </summary>
        </member>
        <member name="T:InSimDotNet.DisconnectedEventArgs">
            <summary>
            Provides data for the <see cref="T:InSimDotNet.InSim"/> Disconnected event.
            </summary>
        </member>
        <member name="M:InSimDotNet.DisconnectedEventArgs.#ctor(InSimDotNet.DisconnectReason)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.DisconnectedEventArgs"/> class.
            </summary>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="P:InSimDotNet.DisconnectedEventArgs.Reason">
            <summary>
            Gets the reason for the disconnection.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.SmallType">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_SMALL"/> SubT.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_NONE">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_SSP">
            <summary>
            Start sending positions
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_SSG">
            <summary>
            Start sending gauges
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_VTA">
            <summary>
            Vote action
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_TMS">
            <summary>
            Time stop
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_STP">
            <summary>
            Time step
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_RTP">
            <summary>
            Race time packet (reply to GTH)
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.SmallType.SMALL_NLI">
            <summary>
            Set node lap interval
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_MSL">
            <summary>
            Message local packet.
            </summary>
            <remarks>
            Used to send a message that appears on local computer only.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSL.#ctor">
            <summary>
            Creates a new message local packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_MSL.GetBuffer">
            <summary>
            Returns the data for the packet.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSL.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSL.Sound">
            <summary>
            Gets or sets the sound effect to play with this message.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_MSL.Msg">
            <summary>
            Gets or sets the message to send.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_ARQ">
            <summary>
            Admin request packet.
            </summary>
            <remarks>
             When sent LFS will respond with a <see cref="T:InSimDotNet.Packets.IR_ARP"/> admin response packet.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_ARQ.#ctor">
            <summary>
            Creates a new admin request packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IR_ARQ.GetBuffer">
            <summary>
            Returns the packet data.
            </summary>
            <returns>The packet data.</returns>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARQ.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARQ.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARQ.ReqI">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.HInfo">
            <summary>
            Host info sub packet for <see cref="T:InSimDotNet.Packets.IR_HOS"/> Info collection.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.HInfo.#ctor(InSimDotNet.PacketReader)">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.HInfo"/> sub-packet.
            </summary>
            <param name="reader">A <see cref="T:InSimDotNet.PacketReader"/> contaning the packet object.</param>
        </member>
        <member name="P:InSimDotNet.Packets.HInfo.HName">
            <summary>
            Gets the name of the host.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.HInfo.Track">
            <summary>
            Gets the short track name.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.HInfo.Flags">
            <summary>
            Gets the <see cref="T:InSimDotNet.Packets.HostFlags"/> for the host.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.HInfo.NumConns">
            <summary>
            Gets the number of connections on the host.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.ReplayMode">
            <summary>
            Represents the replay modes.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayMode.Spr">
            <summary>
            Single-player replay.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.ReplayMode.Mpr">
            <summary>
            Multiplayer replay.
            </summary>
        </member>
        <member name="T:InSimDotNet.MathHelper">
            <summary>
            Static class to help with LFS related math operations.
            </summary>
        </member>
        <member name="M:InSimDotNet.MathHelper.SpeedToMps(System.Double)">
            <summary>
            Converts LFS speed value into meters per second.
            </summary>
            <param name="speed">The speed to convert.</param>
            <returns>The speed in meters per second.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.SpeedToMph(System.Double)">
            <summary>
            Converts LFS speed value to miles per hour.
            </summary>
            <param name="speed">The speed to convert.</param>
            <returns>The speed in miles per hour.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.SpeedToKph(System.Double)">
            <summary>
            Converts LFS speed value to kilometres per hour.
            </summary>
            <param name="speed">The speed to convert.</param>
            <returns>The speed in kilometres per hour.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.MpsToMph(System.Double)">
            <summary>
            Converts meters per second to miles per hour.
            </summary>
            <param name="mps">The meters per second to convert.</param>
            <returns>The speed in miles per hour.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.MpsToKph(System.Double)">
            <summary>
            Converts meters per second to kilometres per hour.
            </summary>
            <param name="mps">The meters per second to convert.</param>
            <returns>The speed in kilometres per hour.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.MetersToMiles(System.Double)">
            <summary>
            Converts meters to miles.
            </summary>
            <param name="meters">The meters to convert.</param>
            <returns>The distance in meters.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.MetersToKilometers(System.Double)">
            <summary>
            Converts meters to kilometres.
            </summary>
            <param name="meters">The meters to convert.</param>
            <returns>The distance in kilometres.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.LengthToMeters(System.Double)">
            <summary>
            Converts LFS world-coordinates to meters.
            </summary>
            <param name="length">The coordinates to convert.</param>
            <returns>The length in meters.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.LengthToMiles(System.Double)">
            <summary>
            Converts LFS world-coordinates to miles.
            </summary>
            <param name="length">The coordinates to convert.</param>
            <returns>The length in miles.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.LengthToKilometers(System.Double)">
            <summary>
            Converts LFS world-coordinates to kilometres.
            </summary>
            <param name="length">The coordinates to convert.</param>
            <returns>The length in kilometres.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The radians to convert.</param>
            <returns>The resulting degrees.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The degrees to convert.</param>
            <returns>The resulting radians.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.RadiansToRpm(System.Double)">
            <summary>
            Converts radians to rotations per minute.
            </summary>
            <param name="radians">The radians to convert.</param>
            <returns>The resulting rotations per minute.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.Distance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines the absolute distance between two points in 3D space.
            </summary>
            <param name="aX">The X coordinate of the first point.</param>
            <param name="aY">The Y coordinate of the first point.</param>
            <param name="aZ">The Z coordinate of the first point.</param>
            <param name="bX">The X coordinate of the second point.</param>
            <param name="bY">The Y coordinate of the second point.</param>
            <param name="bZ">The Z coordinate of the second point.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines the absolute distance between two points in 2D space.
            </summary>
            <param name="aX">The X coordinate of the first point.</param>
            <param name="aY">The Y coordinate of the first point.</param>
            <param name="bX">The X coordinate of the second point.</param>
            <param name="bY">The Y coordinate of the second point.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.Distance(System.Double,System.Double)">
            <summary>
            Determines the absolute distance between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.Intersects(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if two rectangles are intersecting.
            </summary>
            <param name="aX">The X coordinate of the first rectangle.</param>
            <param name="aY">The Y coordinate of the first rectangle.</param>
            <param name="aWidth">The width of the first rectangle.</param>
            <param name="aHeight">The height of the first rectangle.</param>
            <param name="bX">The X coordinate of the second rectangle.</param>
            <param name="bY">The Y coordinate of the second rectangle.</param>
            <param name="bWidth">The width of the second rectangle.</param>
            <param name="bHeight">The height of the second rectangle.</param>
            <returns>True if the rectangles are intersecting.</returns>
        </member>
        <member name="M:InSimDotNet.MathHelper.Contains(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if a rectangle contains a point.
            </summary>
            <param name="rectX">The X coordinates of the rectangle.</param>
            <param name="rectY">The Y coordinates of the rectangle.</param>
            <param name="rectWidth">The width of the rectangle.</param>
            <param name="rectHeight">The height of the rectangle.</param>
            <param name="x">The X coordinates of the point to check.</param>
            <param name="y">The Y coordinates of the point to check.</param>
            <returns>True if the rectangle contains the point.</returns>
        </member>
        <member name="T:InSimDotNet.Packets.PitLaneFact">
            <summary>
            Represents the pit lane facts.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitLaneFact.PITLANE_EXIT">
            <summary>
            Left pit lane
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitLaneFact.PITLANE_ENTER">
            <summary>
            Entered pit lane
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitLaneFact.PITLANE_NO_PURPOSE">
            <summary>
            Entered for no purpose
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitLaneFact.PITLANE_DT">
            <summary>
            Entered for drive-through
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PitLaneFact.PITLANE_SG">
            <summary>
            Entered for stop-go
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.PenaltyValue">
            <summary>
            Represents the penalty values.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_NONE">
            <summary>
            No penalty.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_DT">
            <summary>
            Drive-through.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_DT_VALID">
            <summary>
            Drive-through valid.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_SG">
            <summary>
            Stop and go.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_SG_VALID">
            <summary>
            Stop and go valid.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_30">
            <summary>
            30 seconds.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.PenaltyValue.PENALTY_45">
            <summary>
            45 seconds.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.LeaveReason">
            <summary>
            Enumeration for the <see cref="T:InSimDotNet.Packets.IS_CNL"/> disconnect reason.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_DISCO">
            <summary>
            Disconnect.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_TIMEOUT">
            <summary>
            Timed out.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_LOSTCONN">
            <summary>
            Lost connection.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_KICKED">
            <summary>
            Kicked.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_BANNED">
            <summary>
            Banned.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.LeaveReason.LEAVR_SECURITY">
            <summary>
            Out-of-sync (OOS) or cheat protection.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PLA">
            <summary>
            Pit lane packet.
            </summary>
            <remarks>
            Sent when player enters or leaves pit lane.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLA.#ctor">
            <summary>
            Creates a new pit lane packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PLA.#ctor(System.Byte[])">
            <summary>
            Creates a new pit lane packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLA.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLA.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLA.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLA.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PLA.Fact">
            <summary>
            Gets if the player has entered or left the pit lane.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_PFL">
            <summary>
            Player flags packet.
            </summary>
            <remarks>
            Sent when player flags have changed.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PFL.#ctor">
            <summary>
            Creates a new player flags packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_PFL.#ctor(System.Byte[])">
            <summary>
            Creates a new player flags packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PFL.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PFL.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PFL.ReqI">
            <summary>
            Gets the packet request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PFL.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_PFL.Flags">
            <summary>
            Gets the new player flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CPR">
            <summary>
            Connection player rename packet.
            </summary>
            <remarks>
            Sent when a player is renamed.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CPR.#ctor">
            <summary>
            Creates a new connection player rename packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CPR.#ctor(System.Byte[])">
            <summary>
            Creates a new connection player rename packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.UCID">
            <summary>
            Gets the unique ID of the connection being renamed.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.PName">
            <summary>
            Gets the new name of the player.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CPR.Plate">
            <summary>
            Gets the new number plate of the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IR_ARP">
            <summary>
            Admin response packet.
            </summary>
            <remarks>
            Sent in reply to an <see cref="T:InSimDotNet.Packets.IR_ARQ"/> admin request.
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IR_ARP.#ctor(System.Byte[])">
            <summary>
            Creates a new admin response packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARP.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARP.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARP.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IR_ARP.Admin">
            <summary>
            Gets if you are an admin on the host.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutErrorEventArgs">
            <summary>
            Represents data for the OutError event.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the  <see cref="T:InSimDotNet.Out.OutErrorEventArgs"/> class.
            </summary>
            <param name="exception">The exception associated with the error</param>
        </member>
        <member name="P:InSimDotNet.Out.OutErrorEventArgs.Exception">
            <summary>
            Gets the exception associated with the error.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_CRS">
            <summary>
            Car reset packet.
            </summary>
            <remarks>
            Sent when player resets car (pressed space).
            </remarks>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CRS.#ctor">
            <summary>
            Creates a new car reset packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_CRS.#ctor(System.Byte[])">
            <summary>
            Creates a new car reset packet.
            </summary>
            <param name="buffer">A buffer contaning the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CRS.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CRS.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CRS.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_CRS.PLID">
            <summary>
            Gets the unique ID of the player.
            </summary>
        </member>
        <member name="T:InSimDotNet.InSimErrorEventArgs">
            <summary>
            Provides data for the <see cref="T:InSimDotNet.InSim"/> InSimError event.
            </summary>
        </member>
        <member name="M:InSimDotNet.InSimErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.InSimErrorEventArgs"/> class.
            </summary>
            <param name="exception">The <see cref="P:InSimDotNet.InSimErrorEventArgs.Exception"/> which has occurred.</param>
        </member>
        <member name="P:InSimDotNet.InSimErrorEventArgs.Exception">
            <summary>
            Gets the <see cref="P:InSimDotNet.InSimErrorEventArgs.Exception"/> which has occurred.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.IS_OBH">
            <summary>
            OBject Hit - car hit an autocross object or an unknown object.
            </summary>
        </member>
        <member name="M:InSimDotNet.Packets.IS_OBH.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:InSimDotNet.Packets.IS_OBH"/> object.
            </summary>
            <param name="buffer">The packet data.</param>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.Type">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.ReqI">
            <summary>
            Gets the request ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.PLID">
            <summary>
            Gets the player's unique ID.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.SpClose">
            <summary>
            Gets the closing speed (high 4 bits : reserved / low 12 bits : closing speed (10 = 1 m/s)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.Time">
            <summary>
            Gets the looping time stamp (time since reset - like TINY_GTH).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.C">
            <summary>
            Gets the car in contact with an object.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.X">
            <summary>
            Gets the X position of the object (1 meter = 16).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.Y">
            <summary>
            Gets the Y position of the object (1 meter = 16).
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.Index">
            <summary>
            Gets the object index or zero if it is an unknown object.
            </summary>
        </member>
        <member name="P:InSimDotNet.Packets.IS_OBH.OBHFlags">
            <summary>
            Gets the object flags.
            </summary>
        </member>
        <member name="T:InSimDotNet.Packets.HostType">
            <summary>
            Represents the <see cref="T:InSimDotNet.Packets.IS_ISM"/> Host.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostType.Guest">
            <summary>
            Client is a guest on the host.
            </summary>
        </member>
        <member name="F:InSimDotNet.Packets.HostType.Host">
            <summary>
            Client is the host.
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutSimPack">
            <summary>
            Class to represent an OutSim packet.
            </summary>
        </member>
        <member name="M:InSimDotNet.Out.OutSimPack.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:InSimDotNet.Out.OutSimPack"/> class.
            </summary>
            <param name="buffer">A buffer containing the packet data.</param>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Time">
            <summary>
            Gets the time in milliseconds (to check order).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.AngVel">
            <summary>
            Gets the angular velocity.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Heading">
            <summary>
            Gets the current heading (anticlockwise from above (Z)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Pitch">
            <summary>
            Gets the current pitch (anticlockwise from right (X)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Roll">
            <summary>
            Gets the current roll (anticlockwise from front (Y)).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Accel">
            <summary>
            Gets the current acceleration.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Vel">
            <summary>
            Gets the current velocity.
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.Pos">
            <summary>
            Gets the current position (1m = 65536).
            </summary>
        </member>
        <member name="P:InSimDotNet.Out.OutSimPack.ID">
            <summary>
            Gets the optional OutSim ID (if specified in cfg.txt).
            </summary>
        </member>
        <member name="T:InSimDotNet.Out.OutGaugeFlags">
            <summary>
            OutGauge packet flags.
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.OutGaugeFlags.OG_SHIFT">
            <summary>
            Key,
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.OutGaugeFlags.OG_CTRL">
            <summary>
            Key,
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.OutGaugeFlags.OG_TURBO">
            <summary>
            Show turbo gauge
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.OutGaugeFlags.OG_KM">
            <summary>
            Use prefers KM (as opposed to Miles).
            </summary>
        </member>
        <member name="F:InSimDotNet.Out.OutGaugeFlags.OG_BAR">
            <summary>
            Use prefers Bars (as opposed to PSI).
            </summary>
        </member>
    </members>
</doc>
